/* The following code was generated by JFlex 1.4.3 on 14/04/13 10:00 */

package desc;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 14/04/13 10:00 from the specification file
 * <tt>F:/eclipse juno/workspace/najo/src/desc/desc.flex</tt>
 */
class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\15\1\33\1\1\1\0\1\5\1\2\16\15\4\0\1\32\2\0"+
    "\1\13\1\14\3\0\1\10\1\11\1\7\1\35\3\0\1\6\1\16"+
    "\11\21\7\0\1\25\1\36\1\20\1\30\1\23\1\40\1\43\1\14"+
    "\1\41\1\46\1\14\1\4\1\14\1\3\1\42\1\24\1\14\1\26"+
    "\1\22\1\27\1\45\2\14\1\17\1\37\1\14\1\31\1\0\1\34"+
    "\1\0\1\44\1\0\1\25\1\36\1\20\1\30\1\23\1\40\1\43"+
    "\1\14\1\41\1\46\1\14\1\4\1\14\1\3\1\42\1\24\1\14"+
    "\1\26\1\22\1\27\1\45\2\14\1\17\1\37\1\14\1\0\1\12"+
    "\2\0\41\15\2\0\4\14\4\0\1\14\2\0\1\15\7\0\1\14"+
    "\4\0\1\14\5\0\27\14\1\0\37\14\1\0\u013f\14\31\0\162\14"+
    "\4\0\14\14\16\0\5\14\11\0\1\14\21\0\130\15\5\0\23\15"+
    "\12\0\1\14\13\0\1\14\1\0\3\14\1\0\1\14\1\0\24\14"+
    "\1\0\54\14\1\0\46\14\1\0\5\14\4\0\202\14\1\0\4\15"+
    "\3\0\105\14\1\0\46\14\2\0\2\14\6\0\20\14\41\0\46\14"+
    "\2\0\1\14\7\0\47\14\11\0\21\15\1\0\27\15\1\0\3\15"+
    "\1\0\1\15\1\0\2\15\1\0\1\15\13\0\33\14\5\0\3\14"+
    "\15\0\4\15\14\0\6\15\13\0\32\14\5\0\13\14\16\15\7\0"+
    "\12\15\4\0\2\14\1\15\143\14\1\0\1\14\10\15\1\0\6\15"+
    "\2\14\2\15\1\0\4\15\2\14\12\15\3\14\2\0\1\14\17\0"+
    "\1\15\1\14\1\15\36\14\33\15\2\0\3\14\60\0\46\14\13\15"+
    "\1\14\u014f\0\3\15\66\14\2\0\1\15\1\14\20\15\2\0\1\14"+
    "\4\15\3\0\12\14\2\15\2\0\12\15\21\0\3\15\1\0\10\14"+
    "\2\0\2\14\2\0\26\14\1\0\7\14\1\0\1\14\3\0\4\14"+
    "\2\0\1\15\1\14\7\15\2\0\2\15\2\0\3\15\11\0\1\15"+
    "\4\0\2\14\1\0\3\14\2\15\2\0\12\15\4\14\15\0\3\15"+
    "\1\0\6\14\4\0\2\14\2\0\26\14\1\0\7\14\1\0\2\14"+
    "\1\0\2\14\1\0\2\14\2\0\1\15\1\0\5\15\4\0\2\15"+
    "\2\0\3\15\13\0\4\14\1\0\1\14\7\0\14\15\3\14\14\0"+
    "\3\15\1\0\11\14\1\0\3\14\1\0\26\14\1\0\7\14\1\0"+
    "\2\14\1\0\5\14\2\0\1\15\1\14\10\15\1\0\3\15\1\0"+
    "\3\15\2\0\1\14\17\0\2\14\2\15\2\0\12\15\1\0\1\14"+
    "\17\0\3\15\1\0\10\14\2\0\2\14\2\0\26\14\1\0\7\14"+
    "\1\0\2\14\1\0\5\14\2\0\1\15\1\14\6\15\3\0\2\15"+
    "\2\0\3\15\10\0\2\15\4\0\2\14\1\0\3\14\4\0\12\15"+
    "\1\0\1\14\20\0\1\15\1\14\1\0\6\14\3\0\3\14\1\0"+
    "\4\14\3\0\2\14\1\0\1\14\1\0\2\14\3\0\2\14\3\0"+
    "\3\14\3\0\10\14\1\0\3\14\4\0\5\15\3\0\3\15\1\0"+
    "\4\15\11\0\1\15\17\0\11\15\11\0\1\14\7\0\3\15\1\0"+
    "\10\14\1\0\3\14\1\0\27\14\1\0\12\14\1\0\5\14\4\0"+
    "\7\15\1\0\3\15\1\0\4\15\7\0\2\15\11\0\2\14\4\0"+
    "\12\15\22\0\2\15\1\0\10\14\1\0\3\14\1\0\27\14\1\0"+
    "\12\14\1\0\5\14\2\0\1\15\1\14\7\15\1\0\3\15\1\0"+
    "\4\15\7\0\2\15\7\0\1\14\1\0\2\14\4\0\12\15\22\0"+
    "\2\15\1\0\10\14\1\0\3\14\1\0\27\14\1\0\20\14\4\0"+
    "\6\15\2\0\3\15\1\0\4\15\11\0\1\15\10\0\2\14\4\0"+
    "\12\15\22\0\2\15\1\0\22\14\3\0\30\14\1\0\11\14\1\0"+
    "\1\14\2\0\7\14\3\0\1\15\4\0\6\15\1\0\1\15\1\0"+
    "\10\15\22\0\2\15\15\0\60\14\1\15\2\14\7\15\4\0\10\14"+
    "\10\15\1\0\12\15\47\0\2\14\1\0\1\14\2\0\2\14\1\0"+
    "\1\14\2\0\1\14\6\0\4\14\1\0\7\14\1\0\3\14\1\0"+
    "\1\14\1\0\1\14\2\0\2\14\1\0\4\14\1\15\2\14\6\15"+
    "\1\0\2\15\1\14\2\0\5\14\1\0\1\14\1\0\6\15\2\0"+
    "\12\15\2\0\2\14\42\0\1\14\27\0\2\15\6\0\12\15\13\0"+
    "\1\15\1\0\1\15\1\0\1\15\4\0\2\15\10\14\1\0\42\14"+
    "\6\0\24\15\1\0\2\15\4\14\4\0\10\15\1\0\44\15\11\0"+
    "\1\15\71\0\42\14\1\0\5\14\1\0\2\14\1\0\7\15\3\0"+
    "\4\15\6\0\12\15\6\0\6\14\4\15\106\0\46\14\12\0\51\14"+
    "\7\0\132\14\5\0\104\14\5\0\122\14\6\0\7\14\1\0\77\14"+
    "\1\0\1\14\1\0\4\14\2\0\7\14\1\0\1\14\1\0\4\14"+
    "\2\0\47\14\1\0\1\14\1\0\4\14\2\0\37\14\1\0\1\14"+
    "\1\0\4\14\2\0\7\14\1\0\1\14\1\0\4\14\2\0\7\14"+
    "\1\0\7\14\1\0\27\14\1\0\37\14\1\0\1\14\1\0\4\14"+
    "\2\0\7\14\1\0\47\14\1\0\23\14\16\0\11\15\56\0\125\14"+
    "\14\0\u026c\14\2\0\10\14\12\0\32\14\5\0\113\14\3\0\3\14"+
    "\17\0\15\14\1\0\4\14\3\15\13\0\22\14\3\15\13\0\22\14"+
    "\2\15\14\0\15\14\1\0\3\14\1\0\2\15\14\0\64\14\40\15"+
    "\3\0\1\14\3\0\2\14\1\15\2\0\12\15\41\0\3\15\2\0"+
    "\12\15\6\0\130\14\10\0\51\14\1\15\126\0\35\14\3\0\14\15"+
    "\4\0\14\15\12\0\12\15\36\14\2\0\5\14\u038b\0\154\14\224\0"+
    "\234\14\4\0\132\14\6\0\26\14\2\0\6\14\2\0\46\14\2\0"+
    "\6\14\2\0\10\14\1\0\1\14\1\0\1\14\1\0\1\14\1\0"+
    "\37\14\2\0\65\14\1\0\7\14\1\0\1\14\3\0\3\14\1\0"+
    "\7\14\3\0\4\14\2\0\6\14\4\0\15\14\5\0\3\14\1\0"+
    "\7\14\17\0\4\15\32\0\5\15\20\0\2\14\23\0\1\14\13\0"+
    "\4\15\6\0\6\15\1\0\1\14\15\0\1\14\40\0\22\14\36\0"+
    "\15\15\4\0\1\15\3\0\6\15\27\0\1\14\4\0\1\14\2\0"+
    "\12\14\1\0\1\14\3\0\5\14\6\0\1\14\1\0\1\14\1\0"+
    "\1\14\1\0\4\14\1\0\3\14\1\0\7\14\3\0\3\14\5\0"+
    "\5\14\26\0\44\14\u0e81\0\3\14\31\0\11\14\6\15\1\0\5\14"+
    "\2\0\5\14\4\0\126\14\2\0\2\15\2\0\3\14\1\0\137\14"+
    "\5\0\50\14\4\0\136\14\21\0\30\14\70\0\20\14\u0200\0\u19b6\14"+
    "\112\0\u51a6\14\132\0\u048d\14\u0773\0\u2ba4\14\u215c\0\u012e\14\2\0\73\14"+
    "\225\0\7\14\14\0\5\14\5\0\1\14\1\15\12\14\1\0\15\14"+
    "\1\0\5\14\1\0\1\14\1\0\2\14\1\0\2\14\1\0\154\14"+
    "\41\0\u016b\14\22\0\100\14\2\0\66\14\50\0\15\14\3\0\20\15"+
    "\20\0\4\15\17\0\2\14\30\0\3\14\31\0\1\14\6\0\5\14"+
    "\1\0\207\14\2\0\1\15\4\0\1\14\13\0\12\15\7\0\32\14"+
    "\4\0\1\14\1\0\32\14\12\0\132\14\3\0\6\14\2\0\6\14"+
    "\2\0\6\14\2\0\3\14\3\0\2\14\3\0\2\14\22\0\3\15"+
    "\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\3\1\4\2\1\1\5\1\3"+
    "\1\5\13\3\4\0\2\3\1\6\14\3\1\7\5\3"+
    "\4\0\1\10\11\3\1\11\7\3\1\12\3\3\1\0"+
    "\1\13\2\0\7\3\1\14\2\3\1\15\10\3\2\0"+
    "\2\3\1\16\6\3\1\17\6\3\2\0\1\20\1\21"+
    "\1\22\2\3\1\23\1\11\3\3\1\24\1\3\1\25"+
    "\1\3\1\13\1\0\1\26\2\3\1\27\1\30\2\3"+
    "\1\0\1\31\1\3\1\32\1\3\1\0\2\3\1\0"+
    "\1\33\1\3\1\0\1\3\1\0\1\34\5\0\1\35";

  private static int [] zzUnpackAction() {
    int [] result = new int[161];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\47\0\116\0\165\0\234\0\47\0\303"+
    "\0\352\0\u0111\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb"+
    "\0\u0222\0\u0249\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c\0\u0333"+
    "\0\u035a\0\u0381\0\u03a8\0\u03cf\0\u03f6\0\u041d\0\u0444\0\u046b"+
    "\0\u0492\0\u04b9\0\u04e0\0\u0507\0\u052e\0\u0555\0\u057c\0\u05a3"+
    "\0\u05ca\0\u05f1\0\165\0\u0618\0\u063f\0\u0666\0\u068d\0\u06b4"+
    "\0\u06db\0\u0702\0\u0729\0\u0750\0\u03a8\0\u0777\0\u079e\0\u07c5"+
    "\0\u07ec\0\u0813\0\u083a\0\u0861\0\u0888\0\u08af\0\u08d6\0\u08fd"+
    "\0\u0924\0\u094b\0\u0972\0\u0999\0\u09c0\0\u09e7\0\165\0\u0a0e"+
    "\0\u0a35\0\u0a5c\0\u0a83\0\47\0\u0aaa\0\u0ad1\0\u0af8\0\u0b1f"+
    "\0\u0b46\0\u0b6d\0\u0b94\0\u0bbb\0\u0be2\0\165\0\u0c09\0\u0c30"+
    "\0\165\0\u0c57\0\u0c7e\0\u0ca5\0\u0ccc\0\u0cf3\0\u0d1a\0\u0d41"+
    "\0\u0d68\0\u0d8f\0\u0db6\0\u0ddd\0\u0e04\0\165\0\u0e2b\0\u0e52"+
    "\0\u0e79\0\u0ea0\0\u0ec7\0\u0eee\0\165\0\u0f15\0\u0f3c\0\u0f63"+
    "\0\u0f8a\0\u0fb1\0\u0fd8\0\u0fff\0\u1026\0\165\0\165\0\165"+
    "\0\u104d\0\u1074\0\165\0\165\0\u109b\0\u10c2\0\u10e9\0\165"+
    "\0\u1110\0\165\0\u1137\0\u115e\0\u1185\0\165\0\u11ac\0\u11d3"+
    "\0\165\0\165\0\u11fa\0\u1221\0\u1248\0\165\0\u126f\0\165"+
    "\0\u1296\0\u12bd\0\u12e4\0\u130b\0\u1332\0\165\0\u1359\0\u1380"+
    "\0\u13a7\0\u13ce\0\165\0\u13f5\0\u141c\0\u1443\0\u146a\0\u1491"+
    "\0\47";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[161];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\3\2\1\5\1\2\1\12\1\5\1\13\1\14"+
    "\1\15\2\5\1\16\1\17\1\20\1\21\1\2\2\7"+
    "\2\2\1\22\1\5\1\23\1\24\1\25\2\5\1\26"+
    "\1\5\50\0\1\3\50\0\2\5\7\0\15\5\5\0"+
    "\11\5\3\0\2\5\7\0\15\5\5\0\3\5\1\27"+
    "\5\5\7\0\1\30\45\0\1\31\13\0\1\32\42\0"+
    "\1\14\1\33\1\0\1\14\30\0\2\5\7\0\15\5"+
    "\5\0\4\5\1\34\4\5\16\0\1\14\2\0\1\14"+
    "\30\0\2\5\7\0\13\5\1\35\1\5\5\0\11\5"+
    "\3\0\2\5\7\0\6\5\1\36\6\5\5\0\11\5"+
    "\3\0\2\5\7\0\7\5\1\37\5\5\5\0\11\5"+
    "\3\0\2\5\7\0\12\5\1\40\2\5\5\0\1\5"+
    "\1\41\7\5\3\0\2\5\7\0\11\5\1\42\3\5"+
    "\5\0\4\5\1\43\4\5\3\0\2\5\7\0\15\5"+
    "\5\0\1\5\1\44\1\5\1\45\1\46\4\5\3\0"+
    "\1\5\1\47\7\0\11\5\1\50\3\5\5\0\3\5"+
    "\1\51\5\5\3\0\1\52\1\5\7\0\15\5\5\0"+
    "\11\5\3\0\1\53\1\5\7\0\15\5\5\0\1\54"+
    "\1\5\1\55\6\5\3\0\1\56\1\5\7\0\15\5"+
    "\5\0\11\5\3\0\1\57\1\5\7\0\13\5\1\60"+
    "\1\5\5\0\11\5\7\61\1\62\37\61\6\0\1\63"+
    "\63\0\1\64\41\0\1\65\1\0\2\65\1\0\1\65"+
    "\1\0\1\65\2\0\1\65\5\0\1\65\1\0\1\65"+
    "\11\0\1\5\1\66\7\0\15\5\5\0\11\5\3\0"+
    "\2\5\7\0\12\5\1\67\2\5\5\0\11\5\3\0"+
    "\2\5\7\0\4\5\1\70\10\5\5\0\11\5\3\0"+
    "\2\5\7\0\10\5\1\71\4\5\5\0\11\5\3\0"+
    "\2\5\7\0\15\5\5\0\7\5\1\72\1\5\3\0"+
    "\2\5\7\0\10\5\1\73\4\5\5\0\11\5\3\0"+
    "\2\5\7\0\13\5\1\74\1\5\5\0\11\5\3\0"+
    "\2\5\7\0\15\5\5\0\7\5\1\75\1\5\3\0"+
    "\2\5\7\0\13\5\1\76\1\5\5\0\11\5\3\0"+
    "\1\77\1\5\7\0\15\5\5\0\5\5\1\100\3\5"+
    "\3\0\2\5\7\0\15\5\5\0\4\5\1\101\4\5"+
    "\3\0\2\5\7\0\15\5\5\0\4\5\1\102\4\5"+
    "\3\0\1\5\1\103\7\0\15\5\5\0\11\5\3\0"+
    "\1\5\1\104\7\0\15\5\5\0\11\5\3\0\2\5"+
    "\7\0\13\5\1\105\1\5\5\0\11\5\3\0\2\5"+
    "\7\0\15\5\5\0\10\5\1\106\3\0\2\5\7\0"+
    "\15\5\5\0\2\5\1\107\6\5\3\0\2\5\7\0"+
    "\6\5\1\110\6\5\5\0\11\5\3\0\2\5\7\0"+
    "\7\5\1\111\5\5\5\0\11\5\3\0\2\5\7\0"+
    "\13\5\1\112\1\5\5\0\11\5\7\61\1\113\37\61"+
    "\6\0\1\114\1\62\50\0\1\115\61\0\1\116\25\0"+
    "\2\5\7\0\14\5\1\117\5\0\11\5\3\0\2\5"+
    "\7\0\15\5\5\0\3\5\1\120\5\5\3\0\2\5"+
    "\7\0\15\5\5\0\3\5\1\121\5\5\3\0\2\5"+
    "\7\0\7\5\1\122\5\5\5\0\11\5\3\0\2\5"+
    "\7\0\7\5\1\53\5\5\5\0\11\5\3\0\2\5"+
    "\7\0\7\5\1\123\5\5\5\0\11\5\3\0\2\5"+
    "\7\0\7\5\1\124\5\5\5\0\11\5\3\0\2\5"+
    "\7\0\15\5\5\0\1\125\10\5\3\0\2\5\7\0"+
    "\7\5\1\126\5\5\5\0\11\5\3\0\2\5\7\0"+
    "\11\5\1\127\3\5\5\0\11\5\3\0\2\5\7\0"+
    "\15\5\5\0\6\5\1\130\2\5\3\0\1\5\1\131"+
    "\7\0\15\5\5\0\11\5\3\0\2\5\7\0\11\5"+
    "\1\132\3\5\5\0\11\5\3\0\2\5\7\0\6\5"+
    "\1\133\6\5\5\0\11\5\3\0\2\5\7\0\7\5"+
    "\1\134\5\5\5\0\11\5\3\0\2\5\7\0\7\5"+
    "\1\135\5\5\5\0\11\5\3\0\2\5\7\0\7\5"+
    "\1\136\5\5\5\0\11\5\3\0\2\5\7\0\15\5"+
    "\5\0\3\5\1\137\5\5\3\0\2\5\7\0\14\5"+
    "\1\140\5\0\11\5\3\0\1\5\1\141\7\0\15\5"+
    "\5\0\11\5\6\61\1\114\1\113\37\61\12\0\1\142"+
    "\61\0\1\143\24\0\2\5\7\0\7\5\1\144\5\5"+
    "\5\0\11\5\3\0\1\145\1\5\7\0\15\5\5\0"+
    "\11\5\3\0\2\5\7\0\15\5\5\0\3\5\1\146"+
    "\5\5\3\0\2\5\7\0\11\5\1\147\3\5\5\0"+
    "\11\5\3\0\2\5\7\0\14\5\1\150\5\0\11\5"+
    "\3\0\2\5\7\0\15\5\5\0\6\5\1\151\2\5"+
    "\3\0\1\5\1\152\7\0\15\5\5\0\11\5\3\0"+
    "\2\5\7\0\12\5\1\153\2\5\5\0\11\5\3\0"+
    "\2\5\7\0\7\5\1\154\5\5\5\0\11\5\3\0"+
    "\2\5\7\0\13\5\1\155\1\5\5\0\11\5\3\0"+
    "\2\5\7\0\7\5\1\107\5\5\5\0\11\5\3\0"+
    "\2\5\7\0\14\5\1\156\5\0\11\5\3\0\2\5"+
    "\7\0\15\5\5\0\5\5\1\157\3\5\3\0\2\5"+
    "\7\0\4\5\1\160\10\5\5\0\11\5\3\0\2\5"+
    "\7\0\15\5\5\0\5\5\1\161\3\5\3\0\2\5"+
    "\7\0\7\5\1\162\5\5\5\0\11\5\3\0\2\5"+
    "\7\0\7\5\1\163\5\5\5\0\11\5\13\0\1\164"+
    "\61\0\1\165\23\0\2\5\7\0\15\5\5\0\2\5"+
    "\1\166\6\5\3\0\2\5\7\0\15\5\5\0\5\5"+
    "\1\167\3\5\3\0\2\5\7\0\13\5\1\170\1\5"+
    "\5\0\11\5\3\0\2\5\7\0\7\5\1\171\5\5"+
    "\5\0\11\5\3\0\2\5\7\0\15\5\5\0\3\5"+
    "\1\172\5\5\3\0\2\5\7\0\7\5\1\173\5\5"+
    "\5\0\11\5\3\0\2\5\7\0\15\5\5\0\1\5"+
    "\1\174\7\5\3\0\1\175\1\5\7\0\15\5\5\0"+
    "\11\5\3\0\2\5\7\0\7\5\1\176\5\5\5\0"+
    "\11\5\3\0\2\5\7\0\7\5\1\177\5\5\5\0"+
    "\11\5\3\0\2\5\7\0\13\5\1\200\1\5\5\0"+
    "\11\5\3\0\1\201\1\5\7\0\15\5\5\0\11\5"+
    "\3\0\2\5\7\0\15\5\5\0\2\5\1\202\6\5"+
    "\3\0\2\5\7\0\15\5\5\0\6\5\1\203\2\5"+
    "\1\164\1\114\1\204\44\164\25\0\1\205\24\0\2\5"+
    "\7\0\15\5\5\0\2\5\1\206\6\5\3\0\2\5"+
    "\7\0\6\5\1\207\6\5\5\0\11\5\3\0\2\5"+
    "\7\0\14\5\1\210\5\0\11\5\3\0\2\5\7\0"+
    "\15\5\5\0\2\5\1\211\6\5\3\0\2\5\7\0"+
    "\12\5\1\212\2\5\5\0\11\5\3\0\2\5\7\0"+
    "\7\5\1\213\5\5\5\0\11\5\3\0\2\5\7\0"+
    "\7\5\1\214\5\5\5\0\11\5\1\0\1\114\74\0"+
    "\1\215\22\0\2\5\7\0\15\5\5\0\4\5\1\216"+
    "\4\5\3\0\2\5\7\0\15\5\5\0\3\5\1\217"+
    "\5\5\3\0\2\5\7\0\14\5\1\220\5\0\11\5"+
    "\3\0\1\221\1\5\7\0\15\5\5\0\11\5\23\0"+
    "\1\222\26\0\2\5\7\0\11\5\1\223\3\5\5\0"+
    "\11\5\3\0\2\5\7\0\14\5\1\224\5\0\11\5"+
    "\30\0\1\225\21\0\1\226\1\5\7\0\15\5\5\0"+
    "\11\5\3\0\2\5\7\0\15\5\5\0\3\5\1\227"+
    "\5\5\31\0\1\230\20\0\2\5\7\0\11\5\1\231"+
    "\3\5\5\0\11\5\32\0\1\232\17\0\1\233\1\5"+
    "\7\0\15\5\5\0\11\5\33\0\1\234\47\0\1\235"+
    "\47\0\1\236\47\0\1\237\47\0\1\240\20\0\1\241"+
    "\35\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5304];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\3\1\1\11\20\1\4\0\25\1\4\0"+
    "\26\1\1\0\1\11\2\0\23\1\2\0\20\1\2\0"+
    "\17\1\1\0\7\1\1\0\4\1\1\0\2\1\1\0"+
    "\2\1\1\0\1\1\1\0\1\1\5\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[161];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private Parser yyparser;

  // Variables de contexte  
  private int tokenpos = 0;
  private int numline = 1;
  private StringBuffer literal = new StringBuffer(200);
  private String nextToken;
  
  private int token(int tok) {
     // Sauvegarde du contexte
     numline = yyline+1;
     tokenpos = yycolumn+1;
     nextToken = yytext();   // Sauvegarde du token en cours
     literal.append(nextToken);

     return(tok);
     }

  int getNumline() {
     return numline;
  }
          
  int getTokenpos() {
     return tokenpos;
  }
          
  String getLiteral() {
     return literal.toString();
  }
          
  public Yylex(java.io.Reader r, Parser yyparser) {
    this(r);
    this.yyparser = yyparser;
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1782) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 24: 
          { return token(Parser.T_INTEGER);
          }
        case 30: break;
        case 20: 
          { return token(Parser.T_OBJECT);
          }
        case 31: break;
        case 15: 
          { return token(Parser.T_FLOAT);
          }
        case 32: break;
        case 6: 
          { return token(Parser.AS);
          }
        case 33: break;
        case 22: 
          { return token(Parser.TYPEDEF);
          }
        case 34: break;
        case 7: 
          { return token(Parser.TRUE);
          }
        case 35: break;
        case 10: 
          { return token(Parser.FALSE);
          }
        case 36: break;
        case 23: 
          { return token(Parser.FILEDEF);
          }
        case 37: break;
        case 13: 
          { return token(Parser.T_BOOL);
          }
        case 38: break;
        case 12: 
          { return token(Parser.T_BYTE);
          }
        case 39: break;
        case 11: 
          { token(); /* Comment */
          }
        case 40: break;
        case 9: 
          { return token(Parser.G_BIN);
          }
        case 41: break;
        case 2: 
          { token(); /* newline */
          }
        case 42: break;
        case 3: 
          { yyparser.yylval = new ParserVal(yytext());
	    return token(Parser.IDENT);
          }
        case 43: break;
        case 5: 
          { yyparser.yylval = new ParserVal(yytext());
	    return token(Parser.NUMBER);
          }
        case 44: break;
        case 29: 
          { yyparser.yylval = new ParserVal(yytext());
	    return token(Parser.SEPARATED_BY);
          }
        case 45: break;
        case 25: 
          { return token(Parser.T_DATE_ISO);
          }
        case 46: break;
        case 28: 
          { return token(Parser.G_LITTLE_ENDIAN);
          }
        case 47: break;
        case 1: 
          { return token(yycharat(0));
          }
        case 48: break;
        case 8: 
          { yyparser.yylval = new ParserVal(yytext());
	    return token(Parser.HEXA);
          }
        case 49: break;
        case 14: 
          { return token(Parser.G_ASCII);
          }
        case 50: break;
        case 18: 
          { return token(Parser.REPEAT);
          }
        case 51: break;
        case 19: 
          { return token(Parser.T_DOUBLE);
          }
        case 52: break;
        case 16: 
          { return token(Parser.COLDEF);
          }
        case 53: break;
        case 4: 
          { token(); /* blank */
          }
        case 54: break;
        case 17: 
          { return token(Parser.T_STRING);
          }
        case 55: break;
        case 27: 
          { return token(Parser.G_BIG_ENDIAN);
          }
        case 56: break;
        case 21: 
          { return token(Parser.LINEDEF);
          }
        case 57: break;
        case 26: 
          { return token(Parser.UNSIGNED);
          }
        case 58: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return token(Parser.EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
