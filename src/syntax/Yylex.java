/* The following code was generated by JFlex 1.4.3 on 18/03/16 22:56 */

package syntax;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 18/03/16 22:56 from the specification file
 * <tt>D:/Eclipse/workspace/najo/src/syntax/syntax.flex</tt>
 */
class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int AFMT = 6;
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int FORMAT = 4;
  public static final int BFMT = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\11\1\36\1\1\1\0\1\5\1\2\16\11\4\0\1\24\1\47"+
    "\1\22\1\0\1\10\2\0\1\63\2\0\1\7\1\20\1\0\1\23"+
    "\1\16\1\6\1\12\11\15\1\26\1\64\1\46\1\45\1\44\2\0"+
    "\1\33\1\37\1\14\1\35\1\17\1\21\1\42\1\55\1\43\1\10"+
    "\1\52\1\4\1\61\1\3\1\54\1\32\1\50\1\34\1\31\1\25"+
    "\1\51\1\62\1\56\1\13\1\40\1\27\1\57\1\30\1\60\1\0"+
    "\1\53\1\0\1\33\1\37\1\14\1\35\1\17\1\21\1\42\1\55"+
    "\1\43\1\10\1\52\1\4\1\61\1\3\1\54\1\32\1\50\1\34"+
    "\1\31\1\25\1\51\1\62\1\56\1\13\1\40\1\27\1\0\1\41"+
    "\2\0\41\11\2\0\4\10\4\0\1\10\2\0\1\11\7\0\1\10"+
    "\4\0\1\10\5\0\27\10\1\0\37\10\1\0\u01ca\10\4\0\14\10"+
    "\16\0\5\10\7\0\1\10\1\0\1\10\21\0\160\11\5\10\1\0"+
    "\2\10\2\0\4\10\10\0\1\10\1\0\3\10\1\0\1\10\1\0"+
    "\24\10\1\0\123\10\1\0\213\10\1\0\5\11\2\0\236\10\11\0"+
    "\46\10\2\0\1\10\7\0\47\10\7\0\1\10\1\0\55\11\1\0"+
    "\1\11\1\0\2\11\1\0\2\11\1\0\1\11\10\0\33\10\5\0"+
    "\3\10\15\0\5\11\6\0\1\10\4\0\13\11\5\0\53\10\37\11"+
    "\4\0\2\10\1\11\143\10\1\0\1\10\10\11\1\0\6\11\2\10"+
    "\2\11\1\0\4\11\2\10\12\11\3\10\2\0\1\10\17\0\1\11"+
    "\1\10\1\11\36\10\33\11\2\0\131\10\13\11\1\10\16\0\12\11"+
    "\41\10\11\11\2\10\4\0\1\10\5\0\26\10\4\11\1\10\11\11"+
    "\1\10\3\11\1\10\5\11\22\0\31\10\3\11\104\0\1\10\1\0"+
    "\13\10\67\0\33\11\1\0\4\11\66\10\3\11\1\10\22\11\1\10"+
    "\7\11\12\10\2\11\2\0\12\11\1\0\7\10\1\0\7\10\1\0"+
    "\3\11\1\0\10\10\2\0\2\10\2\0\26\10\1\0\7\10\1\0"+
    "\1\10\3\0\4\10\2\0\1\11\1\10\7\11\2\0\2\11\2\0"+
    "\3\11\1\10\10\0\1\11\4\0\2\10\1\0\3\10\2\11\2\0"+
    "\12\11\4\10\7\0\1\10\5\0\3\11\1\0\6\10\4\0\2\10"+
    "\2\0\26\10\1\0\7\10\1\0\2\10\1\0\2\10\1\0\2\10"+
    "\2\0\1\11\1\0\5\11\4\0\2\11\2\0\3\11\3\0\1\11"+
    "\7\0\4\10\1\0\1\10\7\0\14\11\3\10\1\11\13\0\3\11"+
    "\1\0\11\10\1\0\3\10\1\0\26\10\1\0\7\10\1\0\2\10"+
    "\1\0\5\10\2\0\1\11\1\10\10\11\1\0\3\11\1\0\3\11"+
    "\2\0\1\10\17\0\2\10\2\11\2\0\12\11\1\0\1\10\17\0"+
    "\3\11\1\0\10\10\2\0\2\10\2\0\26\10\1\0\7\10\1\0"+
    "\2\10\1\0\5\10\2\0\1\11\1\10\7\11\2\0\2\11\2\0"+
    "\3\11\10\0\2\11\4\0\2\10\1\0\3\10\2\11\2\0\12\11"+
    "\1\0\1\10\20\0\1\11\1\10\1\0\6\10\3\0\3\10\1\0"+
    "\4\10\3\0\2\10\1\0\1\10\1\0\2\10\3\0\2\10\3\0"+
    "\3\10\3\0\14\10\4\0\5\11\3\0\3\11\1\0\4\11\2\0"+
    "\1\10\6\0\1\11\16\0\12\11\11\0\1\10\7\0\3\11\1\0"+
    "\10\10\1\0\3\10\1\0\27\10\1\0\12\10\1\0\5\10\3\0"+
    "\1\10\7\11\1\0\3\11\1\0\4\11\7\0\2\11\1\0\2\10"+
    "\6\0\2\10\2\11\2\0\12\11\22\0\2\11\1\0\10\10\1\0"+
    "\3\10\1\0\27\10\1\0\12\10\1\0\5\10\2\0\1\11\1\10"+
    "\7\11\1\0\3\11\1\0\4\11\7\0\2\11\7\0\1\10\1\0"+
    "\2\10\2\11\2\0\12\11\1\0\2\10\17\0\2\11\1\0\10\10"+
    "\1\0\3\10\1\0\51\10\2\0\1\10\7\11\1\0\3\11\1\0"+
    "\4\11\1\10\10\0\1\11\10\0\2\10\2\11\2\0\12\11\12\0"+
    "\6\10\2\0\2\11\1\0\22\10\3\0\30\10\1\0\11\10\1\0"+
    "\1\10\2\0\7\10\3\0\1\11\4\0\6\11\1\0\1\11\1\0"+
    "\10\11\22\0\2\11\15\0\60\10\1\11\2\10\7\11\4\0\10\10"+
    "\10\11\1\0\12\11\47\0\2\10\1\0\1\10\2\0\2\10\1\0"+
    "\1\10\2\0\1\10\6\0\4\10\1\0\7\10\1\0\3\10\1\0"+
    "\1\10\1\0\1\10\2\0\2\10\1\0\4\10\1\11\2\10\6\11"+
    "\1\0\2\11\1\10\2\0\5\10\1\0\1\10\1\0\6\11\2\0"+
    "\12\11\2\0\4\10\40\0\1\10\27\0\2\11\6\0\12\11\13\0"+
    "\1\11\1\0\1\11\1\0\1\11\4\0\2\11\10\10\1\0\44\10"+
    "\4\0\24\11\1\0\2\11\5\10\13\11\1\0\44\11\11\0\1\11"+
    "\71\0\53\10\24\11\1\10\12\11\6\0\6\10\4\11\4\10\3\11"+
    "\1\10\3\11\2\10\7\11\3\10\4\11\15\10\14\11\1\10\17\11"+
    "\2\0\46\10\1\0\1\10\5\0\1\10\2\0\53\10\1\0\u014d\10"+
    "\1\0\4\10\2\0\7\10\1\0\1\10\1\0\4\10\2\0\51\10"+
    "\1\0\4\10\2\0\41\10\1\0\4\10\2\0\7\10\1\0\1\10"+
    "\1\0\4\10\2\0\17\10\1\0\71\10\1\0\4\10\2\0\103\10"+
    "\2\0\3\11\40\0\20\10\20\0\125\10\14\0\u026c\10\2\0\21\10"+
    "\1\0\32\10\5\0\113\10\3\0\3\10\17\0\15\10\1\0\4\10"+
    "\3\11\13\0\22\10\3\11\13\0\22\10\2\11\14\0\15\10\1\0"+
    "\3\10\1\0\2\11\14\0\64\10\40\11\3\0\1\10\3\0\2\10"+
    "\1\11\2\0\12\11\41\0\3\11\2\0\12\11\6\0\130\10\10\0"+
    "\51\10\1\11\1\10\5\0\106\10\12\0\35\10\3\0\14\11\4\0"+
    "\14\11\12\0\12\11\36\10\2\0\5\10\13\0\54\10\4\0\21\11"+
    "\7\10\2\11\6\0\12\11\46\0\27\10\5\11\4\0\65\10\12\11"+
    "\1\0\35\11\2\0\13\11\6\0\12\11\15\0\1\10\130\0\5\11"+
    "\57\10\21\11\7\10\4\0\12\11\21\0\11\11\14\0\3\11\36\10"+
    "\15\11\2\10\12\11\54\10\16\11\14\0\44\10\24\11\10\0\12\11"+
    "\3\0\3\10\12\11\44\10\122\0\3\11\1\0\25\11\4\10\1\11"+
    "\4\10\3\11\2\10\11\0\300\10\47\11\25\0\4\11\u0116\10\2\0"+
    "\6\10\2\0\46\10\2\0\6\10\2\0\10\10\1\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\37\10\2\0\65\10\1\0\7\10\1\0"+
    "\1\10\3\0\3\10\1\0\7\10\3\0\4\10\2\0\6\10\4\0"+
    "\15\10\5\0\3\10\1\0\7\10\16\0\5\11\32\0\5\11\20\0"+
    "\2\10\23\0\1\10\13\0\5\11\5\0\6\11\1\0\1\10\15\0"+
    "\1\10\20\0\15\10\3\0\33\10\25\0\15\11\4\0\1\11\3\0"+
    "\14\11\21\0\1\10\4\0\1\10\2\0\12\10\1\0\1\10\3\0"+
    "\5\10\6\0\1\10\1\0\1\10\1\0\1\10\1\0\4\10\1\0"+
    "\13\10\2\0\4\10\5\0\5\10\4\0\1\10\21\0\51\10\u0a77\0"+
    "\57\10\1\0\57\10\1\0\205\10\6\0\4\10\3\11\2\10\14\0"+
    "\46\10\1\0\1\10\5\0\1\10\2\0\70\10\7\0\1\10\17\0"+
    "\1\11\27\10\11\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10"+
    "\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0\40\11"+
    "\57\0\1\10\u01d5\0\3\10\31\0\11\10\6\11\1\0\5\10\2\0"+
    "\5\10\4\0\126\10\2\0\2\11\2\0\3\10\1\0\132\10\1\0"+
    "\4\10\5\0\51\10\3\0\136\10\21\0\33\10\65\0\20\10\u0200\0"+
    "\u19b6\10\112\0\u51cd\10\63\0\u048d\10\103\0\56\10\2\0\u010d\10\3\0"+
    "\20\10\12\11\2\10\24\0\57\10\1\11\4\0\12\11\1\0\31\10"+
    "\7\0\1\11\120\10\2\11\45\0\11\10\2\0\147\10\2\0\4\10"+
    "\1\0\4\10\14\0\13\10\115\0\12\10\1\11\3\10\1\11\4\10"+
    "\1\11\27\10\5\11\20\0\1\10\7\0\64\10\14\0\2\11\62\10"+
    "\21\11\13\0\12\11\6\0\22\11\6\10\3\0\1\10\4\0\12\11"+
    "\34\10\10\11\2\0\27\10\15\11\14\0\35\10\3\0\4\11\57\10"+
    "\16\11\16\0\1\10\12\11\46\0\51\10\16\11\11\0\3\10\1\11"+
    "\10\10\2\11\2\0\12\11\6\0\27\10\3\0\1\10\1\11\4\0"+
    "\60\10\1\11\1\10\3\11\2\10\2\11\5\10\2\11\1\10\1\11"+
    "\1\10\30\0\3\10\2\0\13\10\5\11\2\0\3\10\2\11\12\0"+
    "\6\10\2\0\6\10\2\0\6\10\11\0\7\10\1\0\7\10\221\0"+
    "\43\10\10\11\1\0\2\11\2\0\12\11\6\0\u2ba4\10\14\0\27\10"+
    "\4\0\61\10\u2104\0\u016e\10\2\0\152\10\46\0\7\10\14\0\5\10"+
    "\5\0\1\10\1\11\12\10\1\0\15\10\1\0\5\10\1\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\154\10\41\0\u016b\10\22\0\100\10"+
    "\2\0\66\10\50\0\15\10\3\0\20\11\20\0\7\11\14\0\2\10"+
    "\30\0\3\10\31\0\1\10\6\0\5\10\1\0\207\10\2\0\1\11"+
    "\4\0\1\10\13\0\12\11\7\0\32\10\4\0\1\10\1\0\32\10"+
    "\13\0\131\10\3\0\6\10\2\0\6\10\2\0\6\10\2\0\3\10"+
    "\3\0\2\10\3\0\2\10\22\0\3\11\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\2\2\2\3\1\4\1\1\2\5\1\1"+
    "\2\3\1\6\10\3\4\1\5\3\1\7\1\10\1\11"+
    "\10\1\4\3\2\0\1\12\1\0\1\13\1\14\4\3"+
    "\1\0\6\3\1\15\5\3\1\16\1\17\1\20\1\21"+
    "\1\22\1\3\1\23\4\3\1\24\1\25\1\26\1\27"+
    "\5\0\1\30\1\31\1\3\1\31\1\3\1\32\2\33"+
    "\2\0\1\34\1\0\3\3\1\35\1\0\3\3\1\36"+
    "\2\3\1\37\6\3\1\40\4\3\2\0\1\41\1\42"+
    "\1\0\1\3\1\43\1\0\1\33\1\13\1\0\1\44"+
    "\1\3\1\45\1\3\1\0\1\3\1\46\1\47\1\50"+
    "\11\3\1\51\2\3\3\0\1\3\1\52\1\3\1\0"+
    "\1\53\1\54\1\3\1\55\1\3\1\56\1\57\3\3"+
    "\1\60\1\3\1\0\1\61\1\0\1\3\1\62\1\0"+
    "\1\63\1\64\2\3\1\0\1\65\1\3\1\0\1\41"+
    "\1\3\1\0\2\3\1\0\1\3\1\0\1\3\1\0"+
    "\1\3\1\66\1\0\1\67\1\0\1\3\2\0\1\3"+
    "\2\0\1\3\1\0\1\70\1\0\1\3\4\0\1\3"+
    "\2\0\1\71\2\0\1\3\1\72\1\73\2\0\1\3"+
    "\2\0\1\74\21\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[255];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u0109\0\u013e"+
    "\0\u0173\0\u01a8\0\u0109\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1"+
    "\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459"+
    "\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc\0\u0601"+
    "\0\u0636\0\u066b\0\u06a0\0\u06d5\0\u0109\0\u070a\0\u073f\0\u0774"+
    "\0\u07a9\0\u07de\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c"+
    "\0\u0951\0\u0986\0\u09bb\0\u09f0\0\u0109\0\u0a25\0\u0a5a\0\u0109"+
    "\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\u0c02"+
    "\0\u0c37\0\u0c6c\0\u0ca1\0\u01a8\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75"+
    "\0\u0daa\0\u0109\0\u0109\0\u0109\0\u0109\0\u01a8\0\u0ddf\0\u01a8"+
    "\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0109\0\u0109\0\u0109\0\u0109"+
    "\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u08b2\0\u0109\0\u0ff1"+
    "\0\u01a8\0\u1026\0\u01a8\0\u0109\0\u105b\0\u1090\0\u10c5\0\u0a25"+
    "\0\u10fa\0\u112f\0\u1164\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d"+
    "\0\u12a2\0\u01a8\0\u12d7\0\u130c\0\u01a8\0\u1341\0\u1376\0\u13ab"+
    "\0\u13e0\0\u1415\0\u144a\0\u01a8\0\u147f\0\u14b4\0\u14e9\0\u151e"+
    "\0\u1553\0\u1588\0\u15bd\0\u0109\0\u08b2\0\u15f2\0\u01a8\0\u1627"+
    "\0\u1090\0\u165c\0\u1691\0\u01a8\0\u16c6\0\u01a8\0\u16fb\0\u1730"+
    "\0\u1765\0\u01a8\0\u01a8\0\u01a8\0\u179a\0\u17cf\0\u1804\0\u1839"+
    "\0\u186e\0\u18a3\0\u18d8\0\u190d\0\u1942\0\u01a8\0\u1977\0\u19ac"+
    "\0\u19e1\0\u1a16\0\u1a4b\0\u1a80\0\u01a8\0\u1ab5\0\u1aea\0\u01a8"+
    "\0\u01a8\0\u1b1f\0\u01a8\0\u1b54\0\u01a8\0\u1b89\0\u1bbe\0\u1bf3"+
    "\0\u1c28\0\u01a8\0\u1c5d\0\u1c92\0\u0109\0\u1cc7\0\u1cfc\0\u01a8"+
    "\0\u1d31\0\u01a8\0\u01a8\0\u1d66\0\u1d9b\0\u1dd0\0\u01a8\0\u1e05"+
    "\0\u1e3a\0\u0109\0\u1e6f\0\u1ea4\0\u1ed9\0\u1f0e\0\u1f43\0\u1f78"+
    "\0\u1fad\0\u1fe2\0\u2017\0\u204c\0\u01a8\0\u2081\0\u01a8\0\u20b6"+
    "\0\u20eb\0\u2120\0\u2155\0\u218a\0\u21bf\0\u21f4\0\u2229\0\u225e"+
    "\0\u0109\0\u2293\0\u22c8\0\u22fd\0\u2332\0\u2367\0\u239c\0\u23d1"+
    "\0\u2406\0\u243b\0\u0109\0\u2470\0\u24a5\0\u24da\0\u0109\0\u0109"+
    "\0\u250f\0\u2544\0\u2579\0\u25ae\0\u25e3\0\u01a8\0\u2618\0\u264d"+
    "\0\u2682\0\u26b7\0\u26ec\0\u2721\0\u2756\0\u278b\0\u27c0\0\u27f5"+
    "\0\u282a\0\u285f\0\u2894\0\u28c9\0\u28fe\0\u2933\0\u2968";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[255];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\6"+
    "\1\12\1\6\1\15\2\12\1\16\1\17\1\20\1\6"+
    "\1\21\1\22\1\6\1\13\1\23\1\6\1\12\1\6"+
    "\1\24\1\25\1\26\1\27\1\30\1\13\1\31\1\12"+
    "\1\6\1\32\1\12\1\33\1\34\1\35\1\36\1\37"+
    "\3\12\1\40\1\41\1\42\2\6\1\43\1\12\2\6"+
    "\1\44\1\0\1\6\17\44\1\45\5\44\1\46\34\44"+
    "\1\6\1\7\1\10\1\47\1\6\1\13\1\14\15\6"+
    "\1\13\4\6\1\50\1\6\1\51\2\6\1\13\1\52"+
    "\23\6\1\53\2\6\1\7\1\10\1\47\1\6\1\13"+
    "\1\14\10\6\1\54\1\6\1\54\2\6\1\13\4\6"+
    "\1\50\1\6\1\55\2\6\1\13\2\6\2\54\1\56"+
    "\17\6\1\53\2\6\1\7\1\10\2\12\1\13\1\14"+
    "\1\6\1\12\2\6\2\12\2\6\1\12\1\6\1\12"+
    "\2\6\1\13\1\12\1\6\1\12\1\6\1\57\1\12"+
    "\1\60\2\12\1\13\2\12\1\6\2\12\4\6\7\12"+
    "\2\6\2\12\1\53\1\6\66\0\1\7\66\0\2\12"+
    "\3\0\6\12\1\0\1\12\1\0\1\12\3\0\1\12"+
    "\1\0\1\12\1\0\5\12\1\0\2\12\1\0\2\12"+
    "\4\0\1\12\1\61\2\12\1\62\2\12\2\0\2\12"+
    "\5\0\2\12\3\0\6\12\1\0\1\12\1\0\1\12"+
    "\3\0\1\12\1\0\1\12\1\0\5\12\1\0\2\12"+
    "\1\0\2\12\4\0\7\12\2\0\2\12\10\0\1\63"+
    "\1\64\61\0\1\65\5\0\1\16\1\66\1\0\1\16"+
    "\1\67\2\0\1\70\47\0\1\65\5\0\1\16\2\0"+
    "\1\16\1\67\2\0\1\70\55\0\1\67\2\0\1\67"+
    "\52\0\2\12\3\0\3\12\1\71\2\12\1\0\1\12"+
    "\1\0\1\12\3\0\1\12\1\0\1\12\1\0\5\12"+
    "\1\0\2\12\1\0\2\12\4\0\7\12\2\0\2\12"+
    "\5\0\2\12\3\0\6\12\1\0\1\12\1\0\1\12"+
    "\3\0\1\12\1\0\1\12\1\0\2\12\1\72\1\73"+
    "\1\12\1\0\2\12\1\0\2\12\4\0\4\12\1\74"+
    "\2\12\2\0\2\12\14\0\1\75\2\0\1\75\52\0"+
    "\2\12\3\0\6\12\1\0\1\12\1\0\1\12\3\0"+
    "\1\12\1\0\1\12\1\0\3\12\1\76\1\12\1\0"+
    "\1\12\1\77\1\0\2\12\4\0\7\12\2\0\2\12"+
    "\5\0\2\12\3\0\6\12\1\0\1\100\1\0\1\12"+
    "\3\0\1\12\1\0\1\12\1\0\5\12\1\0\2\12"+
    "\1\0\2\12\4\0\5\12\1\101\1\12\2\0\2\12"+
    "\5\0\2\12\3\0\6\12\1\0\1\12\1\0\1\12"+
    "\3\0\1\12\1\0\1\12\1\0\3\12\1\102\1\12"+
    "\1\0\2\12\1\0\2\12\4\0\7\12\2\0\2\12"+
    "\5\0\1\103\1\12\3\0\6\12\1\0\1\12\1\0"+
    "\1\12\3\0\1\12\1\0\1\12\1\0\1\104\4\12"+
    "\1\0\2\12\1\0\2\12\4\0\7\12\2\0\2\12"+
    "\5\0\2\12\3\0\6\12\1\0\1\12\1\0\1\12"+
    "\3\0\1\12\1\0\1\12\1\0\5\12\1\0\2\12"+
    "\1\0\2\12\4\0\4\12\1\105\2\12\2\0\2\12"+
    "\5\0\2\12\3\0\6\12\1\0\1\106\1\0\1\12"+
    "\3\0\1\12\1\0\1\12\1\0\5\12\1\0\2\12"+
    "\1\0\2\12\4\0\7\12\2\0\2\12\5\0\2\12"+
    "\3\0\6\12\1\0\1\12\1\0\1\12\3\0\1\12"+
    "\1\0\1\12\1\0\3\12\1\107\1\12\1\0\2\12"+
    "\1\0\2\12\4\0\7\12\2\0\2\12\5\0\2\12"+
    "\3\0\6\12\1\0\1\110\1\0\1\12\3\0\1\12"+
    "\1\0\1\12\1\0\3\12\1\111\1\12\1\0\2\12"+
    "\1\0\2\12\4\0\7\12\2\0\2\12\47\0\1\112"+
    "\64\0\1\113\64\0\1\114\64\0\1\115\22\0\2\12"+
    "\3\0\6\12\1\0\1\12\1\0\1\12\3\0\1\12"+
    "\1\0\1\12\1\0\5\12\1\0\2\12\1\0\2\12"+
    "\4\0\1\12\1\71\5\12\2\0\2\12\5\0\1\116"+
    "\1\12\3\0\6\12\1\0\1\12\1\0\1\117\3\0"+
    "\1\12\1\0\1\12\1\0\3\12\1\120\1\12\1\0"+
    "\2\12\1\0\2\12\4\0\7\12\2\0\2\12\5\0"+
    "\2\12\3\0\6\12\1\0\1\12\1\0\1\12\3\0"+
    "\1\12\1\0\1\12\1\0\2\12\1\121\2\12\1\0"+
    "\2\12\1\0\2\12\4\0\7\12\2\0\2\12\5\0"+
    "\2\12\3\0\6\12\1\0\1\12\1\0\1\12\3\0"+
    "\1\12\1\0\1\12\1\0\5\12\1\0\2\12\1\0"+
    "\1\12\1\122\4\0\5\12\1\123\1\12\2\0\2\12"+
    "\5\0\2\12\3\0\6\12\1\0\1\124\1\0\1\12"+
    "\3\0\1\12\1\0\1\12\1\0\5\12\1\0\2\12"+
    "\1\0\2\12\4\0\7\12\2\0\2\12\2\0\1\44"+
    "\2\0\17\44\1\0\5\44\1\0\34\44\3\0\1\125"+
    "\16\0\1\126\2\0\1\127\6\0\1\130\34\0\1\13"+
    "\77\0\1\131\76\0\1\132\76\0\1\133\105\0\1\134"+
    "\12\0\1\135\2\0\1\135\61\0\1\136\2\0\1\136"+
    "\13\0\1\137\45\0\1\136\2\0\1\136\52\0\2\12"+
    "\3\0\6\12\1\0\1\140\1\0\1\12\3\0\1\12"+
    "\1\0\1\12\1\0\5\12\1\0\2\12\1\0\2\12"+
    "\4\0\7\12\2\0\2\12\5\0\2\12\3\0\6\12"+
    "\1\0\1\12\1\0\1\12\3\0\1\12\1\0\1\12"+
    "\1\0\1\141\4\12\1\0\2\12\1\0\2\12\4\0"+
    "\7\12\2\0\2\12\5\0\1\12\1\142\3\0\6\12"+
    "\1\0\1\12\1\0\1\12\3\0\1\12\1\0\1\12"+
    "\1\0\5\12\1\0\2\12\1\0\2\12\4\0\7\12"+
    "\2\0\2\12\5\0\2\12\3\0\6\12\1\0\1\12"+
    "\1\0\1\12\3\0\1\143\1\0\1\12\1\0\5\12"+
    "\1\0\2\12\1\0\2\12\4\0\7\12\2\0\2\12"+
    "\2\0\1\63\1\144\1\145\62\63\7\146\1\147\55\146"+
    "\12\0\1\150\1\0\2\150\1\0\1\150\1\0\1\150"+
    "\11\0\1\150\1\0\1\150\1\0\1\150\37\0\1\67"+
    "\2\0\1\67\1\0\1\151\1\0\1\70\46\0\2\12"+
    "\3\0\6\12\1\0\1\12\1\0\1\12\3\0\1\12"+
    "\1\0\1\12\1\0\5\12\1\0\2\12\1\0\1\12"+
    "\1\152\4\0\7\12\2\0\2\12\5\0\1\12\1\153"+
    "\3\0\6\12\1\0\1\12\1\0\1\12\3\0\1\12"+
    "\1\0\1\12\1\0\5\12\1\0\2\12\1\0\2\12"+
    "\4\0\7\12\2\0\2\12\5\0\2\12\3\0\6\12"+
    "\1\0\1\12\1\0\1\12\3\0\1\12\1\0\1\12"+
    "\1\0\5\12\1\0\2\12\1\0\2\12\4\0\4\12"+
    "\1\154\2\12\2\0\2\12\5\0\2\12\3\0\6\12"+
    "\1\0\1\12\1\0\1\12\3\0\1\12\1\0\1\12"+
    "\1\0\3\12\1\155\1\12\1\0\2\12\1\0\2\12"+
    "\4\0\7\12\2\0\2\12\14\0\1\156\2\0\1\156"+
    "\52\0\2\12\3\0\6\12\1\0\1\12\1\0\1\12"+
    "\3\0\1\12\1\0\1\12\1\0\2\12\1\157\2\12"+
    "\1\0\2\12\1\0\2\12\4\0\1\12\1\160\5\12"+
    "\2\0\2\12\5\0\2\12\3\0\6\12\1\0\1\12"+
    "\1\0\1\12\3\0\1\12\1\0\1\12\1\0\1\12"+
    "\1\161\3\12\1\0\2\12\1\0\2\12\4\0\7\12"+
    "\2\0\2\12\5\0\2\12\3\0\6\12\1\0\1\12"+
    "\1\0\1\12\3\0\1\162\1\0\1\12\1\0\5\12"+
    "\1\0\2\12\1\0\2\12\4\0\7\12\2\0\2\12"+
    "\5\0\2\12\3\0\6\12\1\0\1\12\1\0\1\12"+
    "\3\0\1\12\1\0\1\12\1\0\5\12\1\0\2\12"+
    "\1\0\2\12\4\0\4\12\1\163\2\12\2\0\2\12"+
    "\5\0\2\12\3\0\6\12\1\0\1\12\1\0\1\12"+
    "\3\0\1\12\1\0\1\12\1\0\5\12\1\0\2\12"+
    "\1\0\1\12\1\164\4\0\7\12\2\0\2\12\5\0"+
    "\2\12\3\0\6\12\1\0\1\12\1\0\1\12\3\0"+
    "\1\12\1\0\1\12\1\0\4\12\1\165\1\0\2\12"+
    "\1\0\2\12\4\0\7\12\2\0\2\12\5\0\2\12"+
    "\3\0\6\12\1\0\1\12\1\0\1\12\3\0\1\12"+
    "\1\0\1\12\1\0\5\12\1\0\2\12\1\0\2\12"+
    "\4\0\6\12\1\166\2\0\2\12\5\0\2\12\3\0"+
    "\6\12\1\0\1\12\1\0\1\167\3\0\1\12\1\0"+
    "\1\12\1\0\5\12\1\0\1\170\1\12\1\0\2\12"+
    "\4\0\7\12\2\0\2\12\5\0\2\12\3\0\6\12"+
    "\1\0\1\171\1\0\1\12\3\0\1\12\1\0\1\12"+
    "\1\0\5\12\1\0\2\12\1\0\2\12\4\0\7\12"+
    "\2\0\2\12\5\0\1\172\1\12\3\0\6\12\1\0"+
    "\1\12\1\0\1\12\3\0\1\12\1\0\1\12\1\0"+
    "\5\12\1\0\2\12\1\0\2\12\4\0\7\12\2\0"+
    "\2\12\5\0\2\12\3\0\6\12\1\0\1\12\1\0"+
    "\1\12\3\0\1\12\1\0\1\12\1\0\5\12\1\0"+
    "\2\12\1\0\2\12\4\0\4\12\1\173\2\12\2\0"+
    "\2\12\5\0\2\12\3\0\6\12\1\0\1\12\1\0"+
    "\1\174\3\0\1\12\1\0\1\12\1\0\5\12\1\0"+
    "\2\12\1\0\2\12\4\0\7\12\2\0\2\12\5\0"+
    "\2\12\3\0\6\12\1\0\1\12\1\0\1\12\3\0"+
    "\1\12\1\0\1\12\1\0\5\12\1\0\2\12\1\0"+
    "\2\12\4\0\7\12\2\0\1\12\1\175\5\0\2\12"+
    "\3\0\6\12\1\0\1\12\1\0\1\12\3\0\1\176"+
    "\1\0\1\12\1\0\5\12\1\0\2\12\1\0\2\12"+
    "\4\0\7\12\2\0\2\12\5\0\2\12\3\0\6\12"+
    "\1\0\1\177\1\0\1\12\3\0\1\12\1\0\1\12"+
    "\1\0\5\12\1\0\2\12\1\0\2\12\4\0\7\12"+
    "\2\0\2\12\5\0\2\12\3\0\6\12\1\0\1\12"+
    "\1\0\1\12\3\0\1\200\1\0\1\12\1\0\5\12"+
    "\1\0\2\12\1\0\2\12\4\0\7\12\2\0\2\12"+
    "\34\0\1\201\46\0\1\202\53\0\1\203\144\0\1\204"+
    "\13\0\1\135\2\0\1\135\1\205\51\0\2\12\3\0"+
    "\6\12\1\0\1\12\1\0\1\12\3\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\206\3\12\1\0\2\12\1\0"+
    "\2\12\4\0\7\12\2\0\2\12\5\0\1\12\1\207"+
    "\3\0\6\12\1\0\1\12\1\0\1\12\3\0\1\12"+
    "\1\0\1\12\1\0\5\12\1\0\2\12\1\0\2\12"+
    "\4\0\7\12\2\0\2\12\3\0\1\144\63\0\7\146"+
    "\1\210\63\146\1\211\1\210\55\146\12\0\1\212\2\0"+
    "\1\212\2\0\1\213\2\0\1\213\44\0\2\12\3\0"+
    "\6\12\1\0\1\12\1\0\1\12\3\0\1\214\1\0"+
    "\1\12\1\0\5\12\1\0\2\12\1\0\2\12\4\0"+
    "\7\12\2\0\2\12\5\0\2\12\3\0\6\12\1\0"+
    "\1\12\1\0\1\12\3\0\1\12\1\0\1\12\1\0"+
    "\1\215\4\12\1\0\2\12\1\0\2\12\4\0\7\12"+
    "\2\0\2\12\5\0\2\12\3\0\6\12\1\0\1\12"+
    "\1\0\1\12\3\0\1\12\1\0\1\12\1\0\5\12"+
    "\1\0\2\12\1\0\2\12\4\0\7\12\2\0\1\216"+
    "\1\12\5\0\2\12\3\0\6\12\1\0\1\12\1\0"+
    "\1\12\3\0\1\12\1\0\1\12\1\0\5\12\1\0"+
    "\2\12\1\0\2\12\4\0\7\12\2\0\1\217\1\12"+
    "\14\0\1\220\2\0\1\220\52\0\2\12\3\0\4\12"+
    "\1\221\1\12\1\0\1\12\1\0\1\12\3\0\1\12"+
    "\1\0\1\12\1\0\5\12\1\0\2\12\1\0\2\12"+
    "\4\0\7\12\2\0\2\12\5\0\2\12\3\0\6\12"+
    "\1\0\1\222\1\0\1\12\3\0\1\12\1\0\1\12"+
    "\1\0\5\12\1\0\2\12\1\0\2\12\4\0\7\12"+
    "\2\0\2\12\5\0\2\12\3\0\6\12\1\0\1\223"+
    "\1\0\1\12\3\0\1\12\1\0\1\12\1\0\5\12"+
    "\1\0\2\12\1\0\2\12\4\0\7\12\2\0\2\12"+
    "\5\0\2\12\3\0\6\12\1\0\1\12\1\0\1\12"+
    "\3\0\1\12\1\0\1\12\1\0\5\12\1\0\2\12"+
    "\1\0\2\12\4\0\6\12\1\224\2\0\2\12\5\0"+
    "\1\225\1\12\3\0\6\12\1\0\1\12\1\0\1\12"+
    "\3\0\1\12\1\0\1\12\1\0\5\12\1\0\2\12"+
    "\1\0\2\12\4\0\7\12\2\0\2\12\5\0\1\226"+
    "\1\12\3\0\6\12\1\0\1\12\1\0\1\12\3\0"+
    "\1\12\1\0\1\12\1\0\5\12\1\0\2\12\1\0"+
    "\1\12\1\227\4\0\7\12\2\0\2\12\5\0\2\12"+
    "\3\0\6\12\1\0\1\12\1\0\1\12\3\0\1\12"+
    "\1\0\1\12\1\0\5\12\1\0\2\12\1\0\1\12"+
    "\1\230\4\0\7\12\2\0\2\12\5\0\2\12\3\0"+
    "\6\12\1\0\1\12\1\0\1\12\3\0\1\12\1\0"+
    "\1\12\1\0\5\12\1\0\2\12\1\0\2\12\4\0"+
    "\1\12\1\231\5\12\2\0\2\12\5\0\2\12\3\0"+
    "\6\12\1\0\1\12\1\0\1\12\3\0\1\12\1\0"+
    "\1\12\1\0\2\12\1\232\2\12\1\0\2\12\1\0"+
    "\2\12\4\0\7\12\2\0\2\12\5\0\2\12\3\0"+
    "\6\12\1\0\1\233\1\0\1\12\3\0\1\12\1\0"+
    "\1\12\1\0\5\12\1\0\2\12\1\0\2\12\4\0"+
    "\7\12\2\0\2\12\5\0\2\12\3\0\6\12\1\0"+
    "\1\12\1\0\1\12\3\0\1\12\1\0\1\12\1\0"+
    "\5\12\1\0\2\12\1\0\2\12\4\0\1\12\1\234"+
    "\5\12\2\0\2\12\5\0\2\12\3\0\6\12\1\0"+
    "\1\12\1\0\1\12\3\0\1\12\1\0\1\12\1\0"+
    "\5\12\1\0\2\12\1\0\1\12\1\235\4\0\7\12"+
    "\2\0\2\12\5\0\2\12\3\0\6\12\1\0\1\12"+
    "\1\0\1\12\3\0\1\12\1\0\1\12\1\0\5\12"+
    "\1\0\2\12\1\0\2\12\4\0\5\12\1\236\1\12"+
    "\2\0\2\12\5\0\2\12\3\0\6\12\1\0\1\12"+
    "\1\0\1\12\3\0\1\12\1\0\1\12\1\0\3\12"+
    "\1\237\1\12\1\0\2\12\1\0\2\12\4\0\7\12"+
    "\2\0\2\12\5\0\2\12\3\0\6\12\1\0\1\12"+
    "\1\0\1\12\3\0\1\12\1\0\1\12\1\0\2\12"+
    "\1\240\2\12\1\0\2\12\1\0\2\12\4\0\7\12"+
    "\2\0\2\12\35\0\1\241\74\0\1\242\54\0\1\243"+
    "\34\0\2\12\3\0\6\12\1\0\1\12\1\0\1\12"+
    "\3\0\1\12\1\0\1\12\1\0\2\12\1\244\2\12"+
    "\1\0\2\12\1\0\2\12\4\0\7\12\2\0\2\12"+
    "\2\0\6\146\1\144\1\210\55\146\12\0\1\212\2\0"+
    "\1\212\3\0\1\70\55\0\1\212\2\0\1\212\52\0"+
    "\2\12\3\0\6\12\1\0\1\245\1\0\1\12\3\0"+
    "\1\12\1\0\1\12\1\0\5\12\1\0\2\12\1\0"+
    "\2\12\4\0\7\12\2\0\2\12\5\0\2\12\3\0"+
    "\6\12\1\0\1\12\1\0\1\12\3\0\1\12\1\0"+
    "\1\12\1\0\2\12\1\246\2\12\1\0\2\12\1\0"+
    "\2\12\4\0\7\12\2\0\2\12\14\0\1\247\2\0"+
    "\1\247\52\0\2\12\3\0\6\12\1\0\1\250\1\0"+
    "\1\12\3\0\1\12\1\0\1\12\1\0\5\12\1\0"+
    "\2\12\1\0\2\12\4\0\7\12\2\0\2\12\5\0"+
    "\2\12\3\0\6\12\1\0\1\12\1\0\1\12\3\0"+
    "\1\251\1\0\1\12\1\0\5\12\1\0\2\12\1\0"+
    "\2\12\4\0\7\12\2\0\2\12\5\0\2\12\3\0"+
    "\6\12\1\0\1\12\1\0\1\12\3\0\1\12\1\0"+
    "\1\12\1\0\5\12\1\0\2\12\1\0\2\12\4\0"+
    "\1\12\1\252\5\12\2\0\2\12\5\0\2\12\3\0"+
    "\6\12\1\0\1\12\1\0\1\12\3\0\1\12\1\0"+
    "\1\12\1\0\4\12\1\253\1\0\2\12\1\0\2\12"+
    "\4\0\7\12\2\0\2\12\5\0\1\254\1\12\3\0"+
    "\6\12\1\0\1\12\1\0\1\12\3\0\1\12\1\0"+
    "\1\12\1\0\5\12\1\0\2\12\1\0\2\12\4\0"+
    "\7\12\2\0\2\12\5\0\2\12\3\0\6\12\1\0"+
    "\1\12\1\0\1\12\3\0\1\12\1\0\1\12\1\0"+
    "\5\12\1\0\2\12\1\0\1\255\1\12\4\0\7\12"+
    "\2\0\2\12\5\0\2\12\3\0\6\12\1\0\1\12"+
    "\1\0\1\12\3\0\1\12\1\0\1\12\1\0\5\12"+
    "\1\0\2\12\1\0\2\12\4\0\2\12\1\256\4\12"+
    "\2\0\2\12\5\0\2\12\3\0\6\12\1\0\1\12"+
    "\1\0\1\12\3\0\1\12\1\0\1\12\1\0\3\12"+
    "\1\257\1\12\1\0\2\12\1\0\2\12\4\0\7\12"+
    "\2\0\2\12\5\0\2\12\3\0\6\12\1\0\1\12"+
    "\1\0\1\12\3\0\1\12\1\0\1\12\1\0\1\12"+
    "\1\260\3\12\1\0\2\12\1\0\2\12\4\0\7\12"+
    "\2\0\2\12\5\0\1\261\1\12\3\0\6\12\1\0"+
    "\1\12\1\0\1\12\3\0\1\12\1\0\1\12\1\0"+
    "\5\12\1\0\2\12\1\0\2\12\4\0\7\12\2\0"+
    "\2\12\5\0\2\12\3\0\6\12\1\0\1\262\1\0"+
    "\1\12\3\0\1\12\1\0\1\12\1\0\5\12\1\0"+
    "\2\12\1\0\2\12\4\0\7\12\2\0\2\12\5\0"+
    "\2\12\3\0\6\12\1\0\1\12\1\0\1\12\3\0"+
    "\1\12\1\0\1\12\1\0\4\12\1\263\1\0\2\12"+
    "\1\0\2\12\4\0\7\12\2\0\2\12\36\0\1\264"+
    "\73\0\1\265\55\0\1\266\33\0\2\12\3\0\6\12"+
    "\1\0\1\12\1\0\1\12\3\0\1\12\1\0\1\12"+
    "\1\0\3\12\1\267\1\12\1\0\2\12\1\0\2\12"+
    "\4\0\7\12\2\0\2\12\5\0\2\12\3\0\6\12"+
    "\1\0\1\12\1\0\1\12\3\0\1\270\1\0\1\12"+
    "\1\0\5\12\1\0\2\12\1\0\2\12\4\0\7\12"+
    "\2\0\2\12\10\0\1\271\14\0\1\271\44\0\2\12"+
    "\3\0\6\12\1\0\1\12\1\0\1\12\3\0\1\12"+
    "\1\0\1\12\1\0\5\12\1\0\2\12\1\0\2\12"+
    "\4\0\7\12\2\0\1\272\1\12\5\0\2\12\3\0"+
    "\6\12\1\0\1\273\1\0\1\12\3\0\1\12\1\0"+
    "\1\12\1\0\5\12\1\0\2\12\1\0\2\12\4\0"+
    "\7\12\2\0\2\12\5\0\2\12\3\0\6\12\1\0"+
    "\1\12\1\0\1\12\3\0\1\12\1\0\1\12\1\0"+
    "\5\12\1\0\2\12\1\0\2\12\4\0\3\12\1\274"+
    "\3\12\2\0\2\12\5\0\2\12\3\0\6\12\1\0"+
    "\1\12\1\0\1\12\3\0\1\12\1\0\1\12\1\0"+
    "\2\12\1\275\2\12\1\0\2\12\1\0\2\12\4\0"+
    "\7\12\2\0\2\12\5\0\2\12\3\0\6\12\1\0"+
    "\1\12\1\0\1\12\3\0\1\12\1\0\1\12\1\0"+
    "\5\12\1\0\2\12\1\0\2\12\4\0\7\12\1\276"+
    "\1\0\2\12\5\0\2\12\3\0\6\12\1\0\1\12"+
    "\1\0\1\12\3\0\1\12\1\0\1\12\1\0\5\12"+
    "\1\0\2\12\1\0\1\277\1\12\4\0\7\12\2\0"+
    "\2\12\5\0\2\12\3\0\6\12\1\0\1\12\1\0"+
    "\1\12\3\0\1\12\1\0\1\12\1\0\2\12\1\300"+
    "\2\12\1\0\2\12\1\0\2\12\4\0\7\12\2\0"+
    "\2\12\35\0\1\301\71\0\1\302\27\0\2\12\3\0"+
    "\6\12\1\0\1\12\1\0\1\12\3\0\1\12\1\0"+
    "\1\12\1\0\2\12\1\303\2\12\1\0\2\12\1\0"+
    "\2\12\4\0\7\12\2\0\2\12\14\0\1\304\2\0"+
    "\1\304\52\0\2\12\3\0\6\12\1\0\1\12\1\0"+
    "\1\12\3\0\1\12\1\0\1\12\1\0\5\12\1\0"+
    "\2\12\1\0\2\12\4\0\4\12\1\305\2\12\2\0"+
    "\2\12\5\0\2\12\3\0\6\12\1\0\1\12\1\0"+
    "\1\12\3\0\1\306\1\0\1\12\1\0\5\12\1\0"+
    "\2\12\1\0\2\12\4\0\7\12\2\0\2\12\26\0"+
    "\1\307\43\0\2\12\3\0\6\12\1\0\1\12\1\0"+
    "\1\12\3\0\1\310\1\0\1\12\1\0\5\12\1\0"+
    "\2\12\1\0\2\12\4\0\7\12\2\0\2\12\27\0"+
    "\1\311\42\0\2\12\3\0\6\12\1\0\1\12\1\0"+
    "\1\12\3\0\1\312\1\0\1\12\1\0\5\12\1\0"+
    "\2\12\1\0\2\12\4\0\7\12\2\0\2\12\14\0"+
    "\1\313\2\0\1\313\52\0\1\314\1\12\3\0\6\12"+
    "\1\0\1\12\1\0\1\12\3\0\1\12\1\0\1\12"+
    "\1\0\5\12\1\0\2\12\1\0\2\12\4\0\7\12"+
    "\2\0\2\12\5\0\2\12\3\0\6\12\1\0\1\315"+
    "\1\0\1\12\3\0\1\12\1\0\1\12\1\0\5\12"+
    "\1\0\2\12\1\0\2\12\4\0\7\12\2\0\2\12"+
    "\40\0\1\316\31\0\2\12\3\0\6\12\1\0\1\12"+
    "\1\0\1\12\3\0\1\12\1\0\1\12\1\0\2\12"+
    "\1\317\2\12\1\0\2\12\1\0\2\12\4\0\7\12"+
    "\2\0\2\12\21\0\1\320\50\0\2\12\3\0\6\12"+
    "\1\0\1\321\1\0\1\12\3\0\1\12\1\0\1\12"+
    "\1\0\5\12\1\0\2\12\1\0\2\12\4\0\7\12"+
    "\2\0\2\12\10\0\1\322\3\0\1\323\2\0\1\323"+
    "\5\0\1\322\44\0\2\12\3\0\6\12\1\0\1\12"+
    "\1\0\1\12\3\0\1\12\1\0\1\12\1\0\5\12"+
    "\1\0\2\12\1\0\2\12\4\0\3\12\1\324\3\12"+
    "\2\0\2\12\62\0\1\325\41\0\1\326\32\0\2\12"+
    "\3\0\6\12\1\0\1\12\1\0\1\12\3\0\1\12"+
    "\1\0\1\12\1\0\4\12\1\327\1\0\2\12\1\0"+
    "\2\12\4\0\7\12\2\0\2\12\14\0\1\330\2\0"+
    "\1\330\71\0\1\331\1\0\2\332\42\0\2\12\3\0"+
    "\6\12\1\0\1\333\1\0\1\12\3\0\1\12\1\0"+
    "\1\12\1\0\5\12\1\0\2\12\1\0\2\12\4\0"+
    "\7\12\2\0\2\12\22\0\1\334\70\0\1\335\11\0"+
    "\1\335\31\0\2\12\3\0\6\12\1\0\1\12\1\0"+
    "\1\12\2\0\1\335\1\12\1\0\1\12\1\0\5\12"+
    "\1\335\2\12\1\0\2\12\4\0\7\12\2\0\2\12"+
    "\14\0\1\336\2\0\1\336\61\0\1\337\2\0\1\337"+
    "\52\0\2\12\3\0\6\12\1\0\1\12\1\0\1\12"+
    "\3\0\1\12\1\0\1\12\1\0\3\12\1\340\1\12"+
    "\1\0\2\12\1\0\2\12\4\0\7\12\2\0\2\12"+
    "\41\0\1\341\51\0\1\335\11\0\1\335\1\342\47\0"+
    "\1\343\1\0\2\344\51\0\1\345\2\0\1\345\52\0"+
    "\2\12\3\0\6\12\1\0\1\12\1\0\1\12\3\0"+
    "\1\12\1\0\1\12\1\0\3\12\1\346\1\12\1\0"+
    "\2\12\1\0\2\12\4\0\7\12\2\0\2\12\42\0"+
    "\1\347\64\0\1\350\36\0\1\351\2\0\1\351\75\0"+
    "\1\352\41\0\2\12\3\0\6\12\1\0\1\12\1\0"+
    "\1\12\3\0\1\12\1\0\1\12\1\0\5\12\1\0"+
    "\2\12\1\0\2\12\4\0\4\12\1\353\2\12\2\0"+
    "\2\12\14\0\1\354\2\0\1\354\61\0\1\355\2\0"+
    "\1\355\52\0\2\12\3\0\6\12\1\0\1\12\1\0"+
    "\1\12\3\0\1\12\1\0\1\12\1\0\3\12\1\356"+
    "\1\12\1\0\2\12\1\0\2\12\4\0\7\12\2\0"+
    "\2\12\30\0\1\357\50\0\1\360\2\0\1\360\61\0"+
    "\1\361\2\0\1\361\75\0\1\362\50\0\1\363\2\0"+
    "\1\363\61\0\1\364\2\0\1\364\75\0\1\365\50\0"+
    "\1\366\2\0\1\366\61\0\1\367\2\0\1\367\71\0"+
    "\1\331\4\0\1\370\1\371\46\0\1\372\2\0\1\372"+
    "\71\0\1\331\42\0\1\373\1\0\63\373\16\0\1\374"+
    "\3\0\1\343\4\0\1\375\47\0\1\376\2\0\1\376"+
    "\61\0\1\377\2\0\1\377\71\0\1\343\54\0\1\376"+
    "\2\0\1\376\4\0\1\331\4\0\1\370\47\0\1\377"+
    "\2\0\1\377\4\0\1\343\4\0\1\375\35\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10653];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\2\11\3\1\1\11\31\1\1\11\15\1\2\0"+
    "\1\11\1\0\1\1\1\11\4\1\1\0\14\1\4\11"+
    "\7\1\4\11\5\0\1\1\1\11\4\1\1\11\1\1"+
    "\2\0\1\1\1\0\4\1\1\0\22\1\2\0\1\1"+
    "\1\11\1\0\2\1\1\0\2\1\1\0\4\1\1\0"+
    "\20\1\3\0\3\1\1\0\14\1\1\0\1\11\1\0"+
    "\2\1\1\0\4\1\1\0\2\1\1\0\1\11\1\1"+
    "\1\0\2\1\1\0\1\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\1\1\0\1\1\2\0\1\1\2\0\1\1"+
    "\1\0\1\11\1\0\1\1\4\0\1\1\2\0\1\11"+
    "\2\0\1\1\2\11\2\0\1\1\2\0\1\1\21\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[255];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private Parser yyparser;
  private StringBuilder string = new StringBuilder();
  
  private int tokenpos = 0;
  private int numline = 1;
  private StringBuilder literal = new StringBuilder(200);
  
  private String nextToken = null;
  
	private void setTokenpos(int tokenpos) {
	    this.tokenpos = tokenpos;
	}
	
	public int getTokenpos() {
	    return tokenpos;
	}
	
	private void setNumline(int numline) {
	    this.numline = numline;
	}
	
	public int getNumline() {
	    return numline;
	}
	
	private void setLiteral(String literal) {
	    if (literal == null)
	       this.literal = new StringBuilder(200);
	    else
	       this.literal = new StringBuilder(literal);
	}
	
	public String getLiteral() {
	    return literal.toString();
	}

    public void addYytext(String yytext) {
        literal.append(yytext);
        nextToken = yytext; // Sauvegarde du token en cours
    }

    public void initCmd() {
       yyline=0;
       yycolumn=0;
       setNumline(0);
       setTokenpos(0);
       setLiteral(null);
       yyparser.getPile().popAll();
    }
    
  private void saveToken(String mot) {
     setNumline(yyline+1);
     setTokenpos(yycolumn+1);
     addYytext(mot);
     }
     
  private int token(int tok) {
     saveToken(yytext());
     return(tok);
     }
     
  private int token(int tok, ParserSyntax syntax) {
     yyparser.getPile().push(syntax);
     return(token(tok));
     }
     
  public ParserError yyerror(String error) {
       return new ParserError(getNumline(), getTokenpos(), getLiteral(), error);
  }
  
  public Yylex(java.io.Reader r, Parser yyparser) {
    this(r);
    this.yyparser = yyparser;
  }
  


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2294) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 21: 
          { saveToken(yytext()); string.append('\"');
          }
        case 61: break;
        case 17: 
          { return token(Parser.NE);
          }
        case 62: break;
        case 5: 
          { yyparser.yylval = new ParserVal(yytext());
	    return token(Parser.INTEGER);
          }
        case 63: break;
        case 7: 
          { saveToken(yytext()); string.append( yytext() );
          }
        case 64: break;
        case 25: 
          { return token(Parser.AS);
          }
        case 65: break;
        case 38: 
          { return token(Parser.BOOL_TRUE);
          }
        case 66: break;
        case 6: 
          { saveToken(yytext()); string.setLength(0); yybegin(STRING);
          }
        case 67: break;
        case 41: 
          { return token(Parser.WITH, ParserSyntax.WITH);
          }
        case 68: break;
        case 40: 
          { initCmd(); return token(Parser.SHOW, ParserSyntax.SHOW);
          }
        case 69: break;
        case 36: 
          { return token(Parser.QUIT);
          }
        case 70: break;
        case 56: 
          { /* Suppression des guillemets de debut et fin */
	    String value = yytext().substring(1, yylength() - 1);
	    yyparser.yylval = new ParserVal(yytext());
	
		return token(Parser.DATE_ISO_B);
          }
        case 71: break;
        case 34: 
          { yybegin(YYINITIAL);return token(yycharat(0));
          }
        case 72: break;
        case 32: 
          { return token(Parser.OFF);
          }
        case 73: break;
        case 14: 
          { return token(Parser.GE);
          }
        case 74: break;
        case 60: 
          { return token(Parser.BREAK_ON_ERROR);
          }
        case 75: break;
        case 49: 
          { yybegin(AFMT); return token(Parser.ASCII);
          }
        case 76: break;
        case 16: 
          { return token(Parser.LE);
          }
        case 77: break;
        case 20: 
          { saveToken(yytext()); string.append('\n');
          }
        case 78: break;
        case 57: 
          { /* Suppression des guillemets de debut et fin */
	    String value = yytext().substring(1, yylength() - 1);
	    yyparser.yylval = new ParserVal(yytext());
	
		return token(Parser.DATE_ISO_A);
          }
        case 79: break;
        case 4: 
          { saveToken(yytext()); /* blank */
          }
        case 80: break;
        case 44: 
          { initCmd(); return token(Parser.PRINT, ParserSyntax.PRINT);
          }
        case 81: break;
        case 50: 
          { yybegin(FORMAT); return token(Parser.FORMAT, ParserSyntax.FORMAT);
          }
        case 82: break;
        case 27: 
          { saveToken(""); /* Comment */
          }
        case 83: break;
        case 18: 
          { return token(Parser.ON);
          }
        case 84: break;
        case 1: 
          { return token(yycharat(0));
          }
        case 85: break;
        case 54: 
          { return token(Parser.GENERATE, ParserSyntax.GENERATE_METADATA);
          }
        case 86: break;
        case 26: 
          { return token(Parser.NOT);
          }
        case 87: break;
        case 31: 
          { return token(Parser.AND);
          }
        case 88: break;
        case 39: 
          { return token(Parser.TYPE_DEX);
          }
        case 89: break;
        case 13: 
          { return token(Parser.AS, ParserSyntax.ALIAS);
          }
        case 90: break;
        case 55: 
          { return token(Parser.METADATA);
          }
        case 91: break;
        case 3: 
          { yyparser.yylval = new ParserVal(yytext());
	    return token(Parser.IDENT);
          }
        case 92: break;
        case 30: 
          { initCmd(); return token(Parser.SET, ParserSyntax.SET_ON);
          }
        case 93: break;
        case 10: 
          { /* Suppression du Caractere [lL] en fin de chaine */ 
	    yyparser.yylval = new ParserVal(yytext().substring(0, yylength() - 1));
	    return token(Parser.LONG);
          }
        case 94: break;
        case 12: 
          { yyparser.yylval = new ParserVal(yytext());
	    return token(Parser.FLOAT);
          }
        case 95: break;
        case 37: 
          { return token(Parser.FROM, ParserSyntax.FROM);
          }
        case 96: break;
        case 45: 
          { return token(Parser.ROWID);
          }
        case 97: break;
        case 43: 
          { return token(Parser.TRACE);
          }
        case 98: break;
        case 58: 
          { return token(Parser.GROUP_BY, ParserSyntax.GROUP_BY);
          }
        case 99: break;
        case 42: 
          { return token(Parser.BOOL_FALSE);
          }
        case 100: break;
        case 22: 
          { saveToken(yytext()); string.append('\t');
          }
        case 101: break;
        case 8: 
          { yybegin(YYINITIAL); 
                                   yyparser.yylval = new ParserVal(string.toString());
                                   return token(Parser.STRING);
          }
        case 102: break;
        case 11: 
          { yyparser.yylval = new ParserVal(yytext());
	    return token(Parser.DOUBLE);
          }
        case 103: break;
        case 24: 
          { /* format ascii fortran  */
      yyparser.yylval = new ParserVal(yytext());
      return token(Parser.FMTASCII);
          }
        case 104: break;
        case 15: 
          { return token(Parser.EQEQ);
          }
        case 105: break;
        case 35: 
          { return token(Parser.NULL);
          }
        case 106: break;
        case 53: 
          { return token(Parser.HAVING);
          }
        case 107: break;
        case 46: 
          { return token(Parser.DEBUG);
          }
        case 108: break;
        case 28: 
          { yyparser.yylval = new ParserVal(yytext());
	    return token(Parser.HEXA);
          }
        case 109: break;
        case 48: 
          { return token(Parser.WHERE, ParserSyntax.WHERE);
          }
        case 110: break;
        case 52: 
          { return token(Parser.DEFINE, ParserSyntax.DEFINE);
          }
        case 111: break;
        case 9: 
          { saveToken(yytext()); string.append('\\');
          }
        case 112: break;
        case 33: 
          { yybegin(BFMT); return token(Parser.BIN);
          }
        case 113: break;
        case 23: 
          { saveToken(yytext()); string.append('\r');
          }
        case 114: break;
        case 51: 
          { return token(Parser.ROWNUM);
          }
        case 115: break;
        case 29: 
          { initCmd(); return token(Parser.FOR, ParserSyntax.SELECT);
          }
        case 116: break;
        case 59: 
          { yybegin(YYINITIAL);return token(Parser.SEPARATED_BY);
          }
        case 117: break;
        case 19: 
          { return token(Parser.OR);
          }
        case 118: break;
        case 47: 
          { return token(Parser.BREAK);
          }
        case 119: break;
        case 2: 
          { saveToken(yytext()); /* newline */
          }
        case 120: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case AFMT: {
              yybegin(YYINITIAL);return token(Parser.EOF);
            }
            case 256: break;
            case FORMAT: {
              yybegin(YYINITIAL);return token(Parser.EOF);
            }
            case 257: break;
            case BFMT: {
              yybegin(YYINITIAL);return token(Parser.EOF);
            }
            case 258: break;
            default:
              {
                return token(Parser.EOF);
              }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
