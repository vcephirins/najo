/* The following code was generated by JFlex 1.4.3 on 12/12/10 19:56 */

package grammaire;

import org.najo.Najo;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/12/10 19:56 from the specification file
 * <tt>F:/eclipse/workspace/najo/src/grammaire/najo.flex</tt>
 */
class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int AFMT = 4;
  public static final int STRING = 10;
  public static final int SFMT = 8;
  public static final int YYINITIAL = 0;
  public static final int BFMT = 6;
  public static final int FMT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\11\1\55\1\1\1\0\1\5\1\2\16\11\4\0\1\24\1\40"+
    "\1\22\1\0\1\10\3\0\1\62\1\63\1\7\1\20\1\0\1\23"+
    "\1\16\1\6\1\12\11\15\1\26\1\0\1\37\1\36\1\35\1\64"+
    "\1\0\1\34\1\14\1\44\1\45\1\17\1\21\1\32\1\47\1\33"+
    "\1\10\1\61\1\4\1\60\1\3\1\50\1\52\1\41\1\43\1\46"+
    "\1\25\1\42\1\57\1\51\1\13\1\53\1\27\1\54\1\30\1\56"+
    "\1\0\1\10\1\0\1\34\1\14\1\44\1\45\1\17\1\21\1\32"+
    "\1\47\1\33\1\10\1\61\1\4\1\60\1\3\1\50\1\52\1\41"+
    "\1\43\1\46\1\25\1\42\1\57\1\51\1\13\1\53\1\27\1\0"+
    "\1\31\2\0\41\11\2\0\4\10\4\0\1\10\2\0\1\11\7\0"+
    "\1\10\4\0\1\10\5\0\27\10\1\0\37\10\1\0\u013f\10\31\0"+
    "\162\10\4\0\14\10\16\0\5\10\11\0\1\10\21\0\130\11\5\0"+
    "\23\11\12\0\1\10\13\0\1\10\1\0\3\10\1\0\1\10\1\0"+
    "\24\10\1\0\54\10\1\0\46\10\1\0\5\10\4\0\202\10\1\0"+
    "\4\11\3\0\105\10\1\0\46\10\2\0\2\10\6\0\20\10\41\0"+
    "\46\10\2\0\1\10\7\0\47\10\11\0\21\11\1\0\27\11\1\0"+
    "\3\11\1\0\1\11\1\0\2\11\1\0\1\11\13\0\33\10\5\0"+
    "\3\10\15\0\4\11\14\0\6\11\13\0\32\10\5\0\13\10\16\11"+
    "\7\0\12\11\4\0\2\10\1\11\143\10\1\0\1\10\10\11\1\0"+
    "\6\11\2\10\2\11\1\0\4\11\2\10\12\11\3\10\2\0\1\10"+
    "\17\0\1\11\1\10\1\11\36\10\33\11\2\0\3\10\60\0\46\10"+
    "\13\11\1\10\u014f\0\3\11\66\10\2\0\1\11\1\10\20\11\2\0"+
    "\1\10\4\11\3\0\12\10\2\11\2\0\12\11\21\0\3\11\1\0"+
    "\10\10\2\0\2\10\2\0\26\10\1\0\7\10\1\0\1\10\3\0"+
    "\4\10\2\0\1\11\1\10\7\11\2\0\2\11\2\0\3\11\11\0"+
    "\1\11\4\0\2\10\1\0\3\10\2\11\2\0\12\11\4\10\15\0"+
    "\3\11\1\0\6\10\4\0\2\10\2\0\26\10\1\0\7\10\1\0"+
    "\2\10\1\0\2\10\1\0\2\10\2\0\1\11\1\0\5\11\4\0"+
    "\2\11\2\0\3\11\13\0\4\10\1\0\1\10\7\0\14\11\3\10"+
    "\14\0\3\11\1\0\11\10\1\0\3\10\1\0\26\10\1\0\7\10"+
    "\1\0\2\10\1\0\5\10\2\0\1\11\1\10\10\11\1\0\3\11"+
    "\1\0\3\11\2\0\1\10\17\0\2\10\2\11\2\0\12\11\1\0"+
    "\1\10\17\0\3\11\1\0\10\10\2\0\2\10\2\0\26\10\1\0"+
    "\7\10\1\0\2\10\1\0\5\10\2\0\1\11\1\10\6\11\3\0"+
    "\2\11\2\0\3\11\10\0\2\11\4\0\2\10\1\0\3\10\4\0"+
    "\12\11\1\0\1\10\20\0\1\11\1\10\1\0\6\10\3\0\3\10"+
    "\1\0\4\10\3\0\2\10\1\0\1\10\1\0\2\10\3\0\2\10"+
    "\3\0\3\10\3\0\10\10\1\0\3\10\4\0\5\11\3\0\3\11"+
    "\1\0\4\11\11\0\1\11\17\0\11\11\11\0\1\10\7\0\3\11"+
    "\1\0\10\10\1\0\3\10\1\0\27\10\1\0\12\10\1\0\5\10"+
    "\4\0\7\11\1\0\3\11\1\0\4\11\7\0\2\11\11\0\2\10"+
    "\4\0\12\11\22\0\2\11\1\0\10\10\1\0\3\10\1\0\27\10"+
    "\1\0\12\10\1\0\5\10\2\0\1\11\1\10\7\11\1\0\3\11"+
    "\1\0\4\11\7\0\2\11\7\0\1\10\1\0\2\10\4\0\12\11"+
    "\22\0\2\11\1\0\10\10\1\0\3\10\1\0\27\10\1\0\20\10"+
    "\4\0\6\11\2\0\3\11\1\0\4\11\11\0\1\11\10\0\2\10"+
    "\4\0\12\11\22\0\2\11\1\0\22\10\3\0\30\10\1\0\11\10"+
    "\1\0\1\10\2\0\7\10\3\0\1\11\4\0\6\11\1\0\1\11"+
    "\1\0\10\11\22\0\2\11\15\0\60\10\1\11\2\10\7\11\4\0"+
    "\10\10\10\11\1\0\12\11\47\0\2\10\1\0\1\10\2\0\2\10"+
    "\1\0\1\10\2\0\1\10\6\0\4\10\1\0\7\10\1\0\3\10"+
    "\1\0\1\10\1\0\1\10\2\0\2\10\1\0\4\10\1\11\2\10"+
    "\6\11\1\0\2\11\1\10\2\0\5\10\1\0\1\10\1\0\6\11"+
    "\2\0\12\11\2\0\2\10\42\0\1\10\27\0\2\11\6\0\12\11"+
    "\13\0\1\11\1\0\1\11\1\0\1\11\4\0\2\11\10\10\1\0"+
    "\42\10\6\0\24\11\1\0\2\11\4\10\4\0\10\11\1\0\44\11"+
    "\11\0\1\11\71\0\42\10\1\0\5\10\1\0\2\10\1\0\7\11"+
    "\3\0\4\11\6\0\12\11\6\0\6\10\4\11\106\0\46\10\12\0"+
    "\51\10\7\0\132\10\5\0\104\10\5\0\122\10\6\0\7\10\1\0"+
    "\77\10\1\0\1\10\1\0\4\10\2\0\7\10\1\0\1\10\1\0"+
    "\4\10\2\0\47\10\1\0\1\10\1\0\4\10\2\0\37\10\1\0"+
    "\1\10\1\0\4\10\2\0\7\10\1\0\1\10\1\0\4\10\2\0"+
    "\7\10\1\0\7\10\1\0\27\10\1\0\37\10\1\0\1\10\1\0"+
    "\4\10\2\0\7\10\1\0\47\10\1\0\23\10\16\0\11\11\56\0"+
    "\125\10\14\0\u026c\10\2\0\10\10\12\0\32\10\5\0\113\10\3\0"+
    "\3\10\17\0\15\10\1\0\4\10\3\11\13\0\22\10\3\11\13\0"+
    "\22\10\2\11\14\0\15\10\1\0\3\10\1\0\2\11\14\0\64\10"+
    "\40\11\3\0\1\10\3\0\2\10\1\11\2\0\12\11\41\0\3\11"+
    "\2\0\12\11\6\0\130\10\10\0\51\10\1\11\126\0\35\10\3\0"+
    "\14\11\4\0\14\11\12\0\12\11\36\10\2\0\5\10\u038b\0\154\10"+
    "\224\0\234\10\4\0\132\10\6\0\26\10\2\0\6\10\2\0\46\10"+
    "\2\0\6\10\2\0\10\10\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\37\10\2\0\65\10\1\0\7\10\1\0\1\10\3\0\3\10"+
    "\1\0\7\10\3\0\4\10\2\0\6\10\4\0\15\10\5\0\3\10"+
    "\1\0\7\10\17\0\4\11\32\0\5\11\20\0\2\10\23\0\1\10"+
    "\13\0\4\11\6\0\6\11\1\0\1\10\15\0\1\10\40\0\22\10"+
    "\36\0\15\11\4\0\1\11\3\0\6\11\27\0\1\10\4\0\1\10"+
    "\2\0\12\10\1\0\1\10\3\0\5\10\6\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\4\10\1\0\3\10\1\0\7\10\3\0\3\10"+
    "\5\0\5\10\26\0\44\10\u0e81\0\3\10\31\0\11\10\6\11\1\0"+
    "\5\10\2\0\5\10\4\0\126\10\2\0\2\11\2\0\3\10\1\0"+
    "\137\10\5\0\50\10\4\0\136\10\21\0\30\10\70\0\20\10\u0200\0"+
    "\u19b6\10\112\0\u51a6\10\132\0\u048d\10\u0773\0\u2ba4\10\u215c\0\u012e\10\2\0"+
    "\73\10\225\0\7\10\14\0\5\10\5\0\1\10\1\11\12\10\1\0"+
    "\15\10\1\0\5\10\1\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\154\10\41\0\u016b\10\22\0\100\10\2\0\66\10\50\0\15\10\3\0"+
    "\20\11\20\0\4\11\17\0\2\10\30\0\3\10\31\0\1\10\6\0"+
    "\5\10\1\0\207\10\2\0\1\11\4\0\1\10\13\0\12\11\7\0"+
    "\32\10\4\0\1\10\1\0\32\10\12\0\132\10\3\0\6\10\2\0"+
    "\6\10\2\0\6\10\2\0\3\10\3\0\2\10\3\0\2\10\22\0"+
    "\3\11\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\2\2\2\3\1\4\1\1\1\5\1\3"+
    "\1\5\1\1\2\3\1\6\3\3\4\1\11\3\6\0"+
    "\1\7\1\10\1\11\2\3\2\0\1\12\1\0\1\13"+
    "\1\14\5\3\1\0\5\3\1\15\1\16\1\17\1\20"+
    "\1\21\5\3\1\22\1\3\1\23\4\3\3\0\1\24"+
    "\2\0\1\25\1\26\1\27\1\30\1\3\1\31\2\32"+
    "\2\0\1\33\1\0\4\3\1\34\1\0\5\3\1\35"+
    "\4\3\1\36\2\3\1\37\4\3\4\0\1\40\1\0"+
    "\1\32\1\13\1\0\1\3\1\41\1\3\1\42\1\3"+
    "\1\0\1\3\1\43\1\44\7\3\1\45\1\3\1\46"+
    "\3\3\4\0\1\47\1\50\1\3\1\0\1\51\3\3"+
    "\1\52\1\53\3\3\1\54\1\55\1\3\1\0\1\56"+
    "\2\0\1\57\1\0\1\3\1\0\1\60\1\61\1\62"+
    "\1\63\1\3\4\0\1\3\1\0\1\3\1\0\1\64"+
    "\2\0\1\65\1\0\1\66\5\0\1\67\2\0\1\70"+
    "\7\0\1\71\2\0\1\72\14\0\1\73\15\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[247];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\324\0\324"+
    "\0\u013e\0\u0173\0\u01a8\0\324\0\u01dd\0\u0212\0\u0247\0\u027c"+
    "\0\u02b1\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424"+
    "\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc"+
    "\0\u0601\0\u0636\0\u066b\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774"+
    "\0\u07a9\0\u07de\0\u0813\0\324\0\u0848\0\u087d\0\u08b2\0\u08e7"+
    "\0\u091c\0\324\0\u0951\0\u0986\0\324\0\u09bb\0\u09f0\0\u0a25"+
    "\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd"+
    "\0\u01a8\0\324\0\324\0\324\0\324\0\u0c02\0\u0c37\0\u0c6c"+
    "\0\u0ca1\0\u0cd6\0\u01a8\0\u0d0b\0\u01a8\0\u0d40\0\u0d75\0\u0daa"+
    "\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0774\0\u0eb3\0\u0ee8\0\324"+
    "\0\324\0\324\0\324\0\u0f1d\0\u01a8\0\324\0\u0f52\0\u0f87"+
    "\0\u0fbc\0\u0951\0\u0ff1\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa"+
    "\0\u112f\0\u1164\0\u1199\0\u11ce\0\u1203\0\u1238\0\u01a8\0\u126d"+
    "\0\u12a2\0\u12d7\0\u130c\0\u01a8\0\u1341\0\u1376\0\u01a8\0\u13ab"+
    "\0\u13e0\0\u1415\0\u144a\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u01a8"+
    "\0\u1553\0\u0f87\0\u1588\0\u15bd\0\u15f2\0\u01a8\0\u1627\0\u01a8"+
    "\0\u165c\0\u1691\0\u16c6\0\u01a8\0\u01a8\0\u16fb\0\u1730\0\u1765"+
    "\0\u179a\0\u17cf\0\u1804\0\u1839\0\u01a8\0\u186e\0\u01a8\0\u18a3"+
    "\0\u18d8\0\u190d\0\u1942\0\u1977\0\u19ac\0\u19e1\0\u01a8\0\u01a8"+
    "\0\u1a16\0\u1a4b\0\u01a8\0\u1a80\0\u1ab5\0\u1aea\0\u01a8\0\u01a8"+
    "\0\u1b1f\0\u1b54\0\u1b89\0\u01a8\0\u01a8\0\u1bbe\0\u1bf3\0\324"+
    "\0\u1c28\0\u1c5d\0\u01a8\0\u1c92\0\u1cc7\0\u1cfc\0\u01a8\0\u01a8"+
    "\0\u01a8\0\u01a8\0\u1d31\0\u1d66\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a"+
    "\0\u1e6f\0\u1ea4\0\u1ed9\0\324\0\u1f0e\0\u1f43\0\u01a8\0\u1f78"+
    "\0\u01a8\0\u1fad\0\u1fe2\0\u2017\0\u204c\0\u2081\0\324\0\u20b6"+
    "\0\u20eb\0\324\0\u2120\0\u2155\0\u218a\0\u21bf\0\u21f4\0\u2229"+
    "\0\u225e\0\324\0\u2293\0\u22c8\0\324\0\u22fd\0\u2332\0\u2367"+
    "\0\u239c\0\u23d1\0\u2406\0\u243b\0\u2470\0\u24a5\0\u24da\0\u250f"+
    "\0\u2544\0\324\0\u2579\0\u25ae\0\u25e3\0\u2618\0\u264d\0\u2682"+
    "\0\u26b7\0\u26ec\0\u2721\0\u2756\0\u278b\0\u27c0\0\u27f5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[247];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\7"+
    "\1\13\1\7\1\16\1\13\1\17\1\20\1\21\1\22"+
    "\1\7\1\23\1\24\1\7\1\14\1\25\1\7\1\13"+
    "\2\7\1\26\1\13\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\13\1\35\1\13\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\13\1\7\1\14\1\7\1\13\1\44"+
    "\1\13\3\7\14\0\1\45\17\0\1\46\47\0\1\47"+
    "\1\0\1\47\7\0\2\47\2\50\2\0\1\51\6\0"+
    "\1\52\55\0\1\51\112\0\1\53\2\0\17\53\1\54"+
    "\5\53\1\55\34\53\1\0\1\10\66\0\2\13\3\0"+
    "\6\13\1\0\1\13\1\0\1\13\3\0\1\13\1\0"+
    "\1\13\2\0\3\13\4\0\1\13\1\56\5\13\1\57"+
    "\3\13\3\0\3\13\6\0\2\13\3\0\6\13\1\0"+
    "\1\13\1\0\1\13\3\0\1\13\1\0\1\13\2\0"+
    "\3\13\4\0\13\13\3\0\3\13\11\0\1\60\1\61"+
    "\61\0\1\62\5\0\1\20\1\63\1\0\1\20\1\64"+
    "\2\0\1\65\46\0\2\13\3\0\6\13\1\0\1\13"+
    "\1\0\1\13\3\0\1\13\1\0\1\13\2\0\3\13"+
    "\4\0\2\13\1\66\10\13\3\0\3\13\7\0\1\62"+
    "\5\0\1\20\2\0\1\20\1\64\2\0\1\65\55\0"+
    "\1\64\2\0\1\64\52\0\2\13\3\0\3\13\1\67"+
    "\2\13\1\0\1\13\1\0\1\13\3\0\1\13\1\0"+
    "\1\13\2\0\3\13\4\0\13\13\3\0\3\13\6\0"+
    "\2\13\3\0\6\13\1\0\1\13\1\0\1\13\3\0"+
    "\1\13\1\0\1\13\2\0\2\13\1\70\4\0\2\13"+
    "\1\71\4\13\1\72\3\13\3\0\3\13\15\0\1\73"+
    "\2\0\1\73\52\0\2\13\3\0\6\13\1\0\1\13"+
    "\1\0\1\13\3\0\1\13\1\0\1\13\2\0\3\13"+
    "\4\0\2\13\1\74\7\13\1\75\3\0\3\13\6\0"+
    "\2\13\3\0\6\13\1\0\1\76\1\0\1\13\3\0"+
    "\1\13\1\0\1\13\2\0\3\13\4\0\2\13\1\77"+
    "\10\13\3\0\3\13\6\0\1\100\1\13\3\0\6\13"+
    "\1\0\1\13\1\0\1\13\3\0\1\13\1\0\1\13"+
    "\2\0\3\13\4\0\5\13\1\101\5\13\3\0\3\13"+
    "\41\0\1\102\64\0\1\103\64\0\1\104\64\0\1\105"+
    "\31\0\2\13\3\0\6\13\1\0\1\13\1\0\1\13"+
    "\3\0\1\13\1\0\1\13\2\0\3\13\4\0\1\13"+
    "\1\67\11\13\3\0\3\13\6\0\2\13\3\0\6\13"+
    "\1\0\1\13\1\0\1\13\3\0\1\13\1\0\1\13"+
    "\2\0\3\13\4\0\7\13\1\106\3\13\3\0\3\13"+
    "\6\0\2\13\3\0\6\13\1\0\1\107\1\0\1\13"+
    "\3\0\1\13\1\0\1\13\2\0\3\13\4\0\13\13"+
    "\3\0\3\13\6\0\2\13\3\0\6\13\1\0\1\110"+
    "\1\0\1\13\3\0\1\13\1\0\1\13\2\0\3\13"+
    "\4\0\6\13\1\111\4\13\3\0\3\13\6\0\2\13"+
    "\3\0\6\13\1\0\1\13\1\0\1\13\3\0\1\13"+
    "\1\0\1\13\2\0\2\13\1\112\4\0\13\13\3\0"+
    "\3\13\6\0\1\113\1\13\3\0\6\13\1\0\1\13"+
    "\1\0\1\114\3\0\1\13\1\0\1\13\2\0\3\13"+
    "\4\0\2\13\1\115\10\13\3\0\3\13\6\0\2\13"+
    "\3\0\6\13\1\0\1\13\1\0\1\13\3\0\1\13"+
    "\1\0\1\13\2\0\1\13\1\116\1\13\4\0\6\13"+
    "\1\117\4\13\3\0\3\13\6\0\2\13\3\0\6\13"+
    "\1\0\1\13\1\0\1\13\3\0\1\13\1\0\1\13"+
    "\2\0\3\13\4\0\2\13\1\120\10\13\3\0\3\13"+
    "\6\0\2\13\3\0\6\13\1\0\1\121\1\0\1\13"+
    "\3\0\1\13\1\0\1\13\2\0\3\13\4\0\13\13"+
    "\3\0\3\13\36\0\1\122\77\0\1\123\30\0\1\124"+
    "\2\0\1\124\61\0\1\125\2\0\1\125\106\0\1\126"+
    "\44\0\1\127\45\0\1\53\2\0\17\53\1\0\5\53"+
    "\1\0\34\53\3\0\1\130\16\0\1\131\2\0\1\132"+
    "\15\0\1\133\24\0\1\13\1\134\3\0\6\13\1\0"+
    "\1\13\1\0\1\13\3\0\1\13\1\0\1\13\2\0"+
    "\3\13\4\0\13\13\3\0\3\13\6\0\2\13\3\0"+
    "\6\13\1\0\1\13\1\0\1\13\3\0\1\135\1\0"+
    "\1\13\2\0\3\13\4\0\13\13\3\0\3\13\3\0"+
    "\1\60\1\136\1\137\62\60\7\140\1\141\55\140\12\0"+
    "\1\142\1\0\2\142\1\0\1\142\1\0\1\142\12\0"+
    "\1\142\7\0\2\142\31\0\1\64\2\0\1\64\1\0"+
    "\1\143\1\0\1\65\46\0\2\13\3\0\6\13\1\0"+
    "\1\144\1\0\1\13\3\0\1\13\1\0\1\13\2\0"+
    "\3\13\4\0\13\13\3\0\3\13\6\0\2\13\3\0"+
    "\6\13\1\0\1\13\1\0\1\13\3\0\1\13\1\0"+
    "\1\13\2\0\1\13\1\145\1\13\4\0\13\13\3\0"+
    "\3\13\6\0\1\13\1\146\3\0\6\13\1\0\1\13"+
    "\1\0\1\13\3\0\1\13\1\0\1\13\2\0\3\13"+
    "\4\0\13\13\3\0\3\13\6\0\2\13\3\0\6\13"+
    "\1\0\1\13\1\0\1\13\3\0\1\13\1\0\1\13"+
    "\2\0\3\13\4\0\7\13\1\147\3\13\3\0\3\13"+
    "\6\0\2\13\3\0\6\13\1\0\1\13\1\0\1\13"+
    "\3\0\1\13\1\0\1\13\2\0\3\13\4\0\2\13"+
    "\1\150\10\13\3\0\3\13\15\0\1\151\2\0\1\151"+
    "\52\0\2\13\3\0\6\13\1\0\1\13\1\0\1\13"+
    "\3\0\1\13\1\0\1\13\2\0\2\13\1\152\4\0"+
    "\1\13\1\153\11\13\3\0\3\13\6\0\2\13\3\0"+
    "\6\13\1\0\1\13\1\0\1\13\3\0\1\13\1\0"+
    "\1\13\2\0\3\13\4\0\11\13\1\154\1\13\3\0"+
    "\3\13\6\0\1\155\1\13\3\0\6\13\1\0\1\13"+
    "\1\0\1\13\3\0\1\13\1\0\1\13\2\0\3\13"+
    "\4\0\13\13\3\0\3\13\6\0\2\13\3\0\6\13"+
    "\1\0\1\13\1\0\1\13\3\0\1\13\1\0\1\13"+
    "\2\0\3\13\4\0\7\13\1\156\3\13\3\0\3\13"+
    "\6\0\2\13\3\0\6\13\1\0\1\13\1\0\1\13"+
    "\3\0\1\13\1\0\1\13\2\0\3\13\4\0\4\13"+
    "\1\157\6\13\3\0\3\13\6\0\2\13\3\0\6\13"+
    "\1\0\1\13\1\0\1\13\3\0\1\13\1\0\1\13"+
    "\2\0\3\13\4\0\10\13\1\160\2\13\3\0\3\13"+
    "\6\0\2\13\3\0\4\13\1\161\1\13\1\0\1\13"+
    "\1\0\1\162\3\0\1\13\1\0\1\13\2\0\3\13"+
    "\4\0\13\13\3\0\3\13\6\0\1\13\1\163\3\0"+
    "\6\13\1\0\1\13\1\0\1\13\3\0\1\164\1\0"+
    "\1\13\2\0\3\13\4\0\13\13\3\0\3\13\6\0"+
    "\2\13\3\0\6\13\1\0\1\13\1\0\1\13\3\0"+
    "\1\13\1\0\1\13\2\0\3\13\4\0\7\13\1\165"+
    "\3\13\3\0\3\13\6\0\2\13\3\0\6\13\1\0"+
    "\1\13\1\0\1\13\3\0\1\13\1\0\1\13\2\0"+
    "\3\13\4\0\13\13\3\0\1\166\2\13\6\0\2\13"+
    "\3\0\6\13\1\0\1\13\1\0\1\167\3\0\1\13"+
    "\1\0\1\13\2\0\3\13\4\0\13\13\3\0\3\13"+
    "\6\0\2\13\3\0\6\13\1\0\1\13\1\0\1\13"+
    "\3\0\1\170\1\0\1\13\2\0\3\13\4\0\13\13"+
    "\3\0\3\13\6\0\2\13\3\0\6\13\1\0\1\171"+
    "\1\0\1\13\3\0\1\13\1\0\1\13\2\0\3\13"+
    "\4\0\13\13\3\0\3\13\6\0\2\13\3\0\6\13"+
    "\1\0\1\13\1\0\1\13\3\0\1\13\1\0\1\13"+
    "\2\0\1\13\1\172\1\13\4\0\13\13\3\0\3\13"+
    "\6\0\2\13\3\0\6\13\1\0\1\13\1\0\1\13"+
    "\3\0\1\173\1\0\1\13\2\0\3\13\4\0\13\13"+
    "\3\0\3\13\6\0\1\174\125\0\1\175\32\0\1\124"+
    "\2\0\1\124\1\50\65\0\1\176\117\0\1\177\15\0"+
    "\1\13\1\200\3\0\6\13\1\0\1\13\1\0\1\13"+
    "\3\0\1\13\1\0\1\13\2\0\3\13\4\0\13\13"+
    "\3\0\3\13\4\0\1\136\63\0\7\140\1\201\63\140"+
    "\1\202\1\201\55\140\12\0\1\203\2\0\1\203\2\0"+
    "\1\204\2\0\1\204\44\0\2\13\3\0\6\13\1\0"+
    "\1\13\1\0\1\13\3\0\1\13\1\0\1\13\2\0"+
    "\2\13\1\205\4\0\13\13\3\0\3\13\6\0\2\13"+
    "\3\0\6\13\1\0\1\13\1\0\1\13\3\0\1\206"+
    "\1\0\1\13\2\0\3\13\4\0\13\13\3\0\3\13"+
    "\6\0\2\13\3\0\6\13\1\0\1\13\1\0\1\13"+
    "\3\0\1\13\1\0\1\13\2\0\3\13\4\0\5\13"+
    "\1\207\5\13\3\0\3\13\6\0\2\13\3\0\6\13"+
    "\1\0\1\13\1\0\1\13\3\0\1\13\1\0\1\13"+
    "\2\0\3\13\4\0\13\13\3\0\1\13\1\210\1\13"+
    "\6\0\2\13\3\0\6\13\1\0\1\13\1\0\1\13"+
    "\3\0\1\13\1\0\1\13\2\0\3\13\4\0\13\13"+
    "\3\0\1\13\1\211\1\13\15\0\1\212\2\0\1\212"+
    "\52\0\2\13\3\0\6\13\1\0\1\13\1\0\1\13"+
    "\3\0\1\13\1\0\1\13\2\0\3\13\4\0\3\13"+
    "\1\213\7\13\3\0\3\13\6\0\2\13\3\0\6\13"+
    "\1\0\1\214\1\0\1\13\3\0\1\13\1\0\1\13"+
    "\2\0\3\13\4\0\13\13\3\0\3\13\6\0\2\13"+
    "\3\0\6\13\1\0\1\215\1\0\1\13\3\0\1\13"+
    "\1\0\1\13\2\0\3\13\4\0\13\13\3\0\3\13"+
    "\6\0\2\13\3\0\6\13\1\0\1\216\1\0\1\13"+
    "\3\0\1\13\1\0\1\13\2\0\3\13\4\0\13\13"+
    "\3\0\3\13\6\0\2\13\3\0\6\13\1\0\1\13"+
    "\1\0\1\13\3\0\1\13\1\0\1\13\2\0\3\13"+
    "\4\0\1\13\1\217\11\13\3\0\3\13\6\0\1\220"+
    "\1\13\3\0\6\13\1\0\1\13\1\0\1\13\3\0"+
    "\1\13\1\0\1\13\2\0\1\13\1\221\1\13\4\0"+
    "\13\13\3\0\3\13\6\0\2\13\3\0\6\13\1\0"+
    "\1\13\1\0\1\13\3\0\1\13\1\0\1\13\2\0"+
    "\3\13\4\0\1\13\1\222\11\13\3\0\3\13\6\0"+
    "\2\13\3\0\6\13\1\0\1\13\1\0\1\13\3\0"+
    "\1\13\1\0\1\13\2\0\1\13\1\223\1\13\4\0"+
    "\13\13\3\0\3\13\6\0\2\13\3\0\6\13\1\0"+
    "\1\224\1\0\1\13\3\0\1\13\1\0\1\13\2\0"+
    "\3\13\4\0\13\13\3\0\3\13\6\0\2\13\3\0"+
    "\6\13\1\0\1\13\1\0\1\13\3\0\1\13\1\0"+
    "\1\13\2\0\3\13\4\0\10\13\1\225\2\13\3\0"+
    "\3\13\6\0\2\13\3\0\6\13\1\0\1\13\1\0"+
    "\1\13\3\0\1\13\1\0\1\13\2\0\1\13\1\226"+
    "\1\13\4\0\13\13\3\0\3\13\6\0\2\13\3\0"+
    "\6\13\1\0\1\13\1\0\1\13\3\0\1\13\1\0"+
    "\1\13\2\0\3\13\4\0\6\13\1\227\4\13\3\0"+
    "\3\13\6\0\2\13\3\0\6\13\1\0\1\13\1\0"+
    "\1\13\3\0\1\13\1\0\1\13\2\0\3\13\4\0"+
    "\2\13\1\230\10\13\3\0\3\13\6\0\1\231\1\13"+
    "\3\0\6\13\1\0\1\13\1\0\1\13\3\0\1\13"+
    "\1\0\1\13\2\0\3\13\4\0\13\13\3\0\3\13"+
    "\6\0\2\13\3\0\6\13\1\0\1\13\1\0\1\13"+
    "\3\0\1\13\1\0\1\13\2\0\2\13\1\232\4\0"+
    "\13\13\3\0\3\13\65\0\1\233\35\0\1\234\101\0"+
    "\1\235\50\0\1\236\30\0\6\140\1\136\1\201\55\140"+
    "\12\0\1\203\2\0\1\203\3\0\1\65\55\0\1\203"+
    "\2\0\1\203\52\0\2\13\3\0\6\13\1\0\1\13"+
    "\1\0\1\13\3\0\1\13\1\0\1\13\2\0\3\13"+
    "\4\0\13\13\3\0\2\13\1\237\6\0\2\13\3\0"+
    "\6\13\1\0\1\240\1\0\1\13\3\0\1\13\1\0"+
    "\1\13\2\0\3\13\4\0\13\13\3\0\3\13\6\0"+
    "\2\13\3\0\6\13\1\0\1\13\1\0\1\13\3\0"+
    "\1\13\1\0\1\13\2\0\2\13\1\241\4\0\13\13"+
    "\3\0\3\13\15\0\1\242\2\0\1\242\52\0\2\13"+
    "\3\0\6\13\1\0\1\243\1\0\1\13\3\0\1\13"+
    "\1\0\1\13\2\0\3\13\4\0\13\13\3\0\3\13"+
    "\6\0\2\13\3\0\6\13\1\0\1\13\1\0\1\13"+
    "\3\0\1\13\1\0\1\13\2\0\3\13\4\0\2\13"+
    "\1\244\10\13\3\0\3\13\6\0\2\13\3\0\6\13"+
    "\1\0\1\13\1\0\1\13\3\0\1\13\1\0\1\13"+
    "\2\0\3\13\4\0\11\13\1\245\1\13\3\0\3\13"+
    "\6\0\2\13\3\0\6\13\1\0\1\13\1\0\1\13"+
    "\3\0\1\13\1\0\1\13\2\0\3\13\4\0\1\13"+
    "\1\246\11\13\3\0\3\13\6\0\2\13\3\0\6\13"+
    "\1\0\1\13\1\0\1\13\3\0\1\13\1\0\1\13"+
    "\2\0\3\13\4\0\4\13\1\247\6\13\3\0\3\13"+
    "\6\0\2\13\3\0\6\13\1\0\1\13\1\0\1\13"+
    "\3\0\1\13\1\0\1\13\2\0\1\250\2\13\4\0"+
    "\13\13\3\0\3\13\6\0\1\251\1\13\3\0\6\13"+
    "\1\0\1\13\1\0\1\13\3\0\1\13\1\0\1\13"+
    "\2\0\3\13\4\0\13\13\3\0\3\13\6\0\2\13"+
    "\3\0\6\13\1\0\1\13\1\0\1\13\3\0\1\13"+
    "\1\0\1\13\2\0\3\13\4\0\3\13\1\252\7\13"+
    "\3\0\3\13\6\0\1\253\1\13\3\0\6\13\1\0"+
    "\1\13\1\0\1\13\3\0\1\13\1\0\1\13\2\0"+
    "\3\13\4\0\13\13\3\0\3\13\6\0\2\13\3\0"+
    "\6\13\1\0\1\254\1\0\1\13\3\0\1\13\1\0"+
    "\1\13\2\0\3\13\4\0\13\13\3\0\3\13\6\0"+
    "\2\13\3\0\6\13\1\0\1\13\1\0\1\13\3\0"+
    "\1\255\1\0\1\13\2\0\3\13\4\0\13\13\3\0"+
    "\3\13\6\0\2\13\3\0\6\13\1\0\1\13\1\0"+
    "\1\13\3\0\1\13\1\0\1\13\2\0\3\13\4\0"+
    "\4\13\1\256\6\13\3\0\3\13\37\0\1\257\63\0"+
    "\1\260\52\0\1\261\106\0\1\262\24\0\2\13\3\0"+
    "\6\13\1\0\1\13\1\0\1\13\3\0\1\263\1\0"+
    "\1\13\2\0\3\13\4\0\13\13\3\0\3\13\11\0"+
    "\1\264\14\0\1\264\44\0\2\13\3\0\6\13\1\0"+
    "\1\13\1\0\1\13\3\0\1\13\1\0\1\13\2\0"+
    "\2\13\1\265\4\0\13\13\3\0\3\13\6\0\2\13"+
    "\3\0\6\13\1\0\1\13\1\0\1\13\3\0\1\13"+
    "\1\0\1\13\2\0\3\13\4\0\13\13\1\266\2\0"+
    "\3\13\6\0\2\13\3\0\6\13\1\0\1\13\1\0"+
    "\1\13\3\0\1\13\1\0\1\13\2\0\3\13\4\0"+
    "\13\13\3\0\1\13\1\267\1\13\6\0\2\13\3\0"+
    "\6\13\1\0\1\270\1\0\1\13\3\0\1\13\1\0"+
    "\1\13\2\0\3\13\4\0\13\13\3\0\3\13\6\0"+
    "\2\13\3\0\6\13\1\0\1\13\1\0\1\13\3\0"+
    "\1\271\1\0\1\13\2\0\3\13\4\0\13\13\3\0"+
    "\3\13\6\0\2\13\3\0\6\13\1\0\1\13\1\0"+
    "\1\13\3\0\1\13\1\0\1\13\2\0\1\272\2\13"+
    "\4\0\13\13\3\0\3\13\6\0\2\13\3\0\6\13"+
    "\1\0\1\13\1\0\1\13\3\0\1\13\1\0\1\13"+
    "\2\0\2\13\1\273\4\0\13\13\3\0\3\13\46\0"+
    "\1\274\56\0\1\275\63\0\1\276\42\0\1\277\2\0"+
    "\1\277\52\0\2\13\3\0\6\13\1\0\1\13\1\0"+
    "\1\13\3\0\1\300\1\0\1\13\2\0\3\13\4\0"+
    "\13\13\3\0\3\13\27\0\1\301\43\0\2\13\3\0"+
    "\6\13\1\0\1\13\1\0\1\13\3\0\1\302\1\0"+
    "\1\13\2\0\3\13\4\0\13\13\3\0\3\13\56\0"+
    "\1\303\46\0\1\304\54\0\1\305\51\0\1\306\2\0"+
    "\1\306\52\0\2\13\3\0\6\13\1\0\1\307\1\0"+
    "\1\13\3\0\1\13\1\0\1\13\2\0\3\13\4\0"+
    "\13\13\3\0\3\13\60\0\1\310\12\0\2\13\3\0"+
    "\6\13\1\0\1\13\1\0\1\13\3\0\1\13\1\0"+
    "\1\13\2\0\2\13\1\311\4\0\13\13\3\0\3\13"+
    "\66\0\1\312\20\0\1\313\53\0\1\314\3\0\1\315"+
    "\2\0\1\315\5\0\1\314\117\0\1\316\72\0\1\317"+
    "\45\0\1\320\31\0\1\321\2\0\1\321\71\0\1\322"+
    "\1\0\2\323\57\0\1\324\120\0\1\325\22\0\1\326"+
    "\2\0\1\326\61\0\1\327\2\0\1\327\63\0\1\330"+
    "\74\0\1\331\62\0\1\332\1\0\2\333\51\0\1\334"+
    "\2\0\1\334\122\0\1\335\66\0\1\336\21\0\1\337"+
    "\2\0\1\337\75\0\1\340\114\0\1\341\20\0\1\342"+
    "\2\0\1\342\61\0\1\343\2\0\1\343\67\0\1\344"+
    "\72\0\1\345\50\0\1\346\2\0\1\346\63\0\1\347"+
    "\62\0\1\350\2\0\1\350\75\0\1\351\111\0\1\352"+
    "\23\0\1\353\2\0\1\353\61\0\1\354\2\0\1\354"+
    "\75\0\1\355\50\0\1\356\2\0\1\356\61\0\1\357"+
    "\2\0\1\357\71\0\1\322\4\0\1\360\1\361\46\0"+
    "\1\362\2\0\1\362\71\0\1\322\42\0\1\363\1\0"+
    "\63\363\16\0\1\364\3\0\1\332\4\0\1\365\47\0"+
    "\1\366\2\0\1\366\61\0\1\367\2\0\1\367\71\0"+
    "\1\332\54\0\1\366\2\0\1\366\4\0\1\322\4\0"+
    "\1\360\47\0\1\367\2\0\1\367\4\0\1\332\4\0"+
    "\1\365\35\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10282];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\10\1\0\2\11\3\1\1\11\30\1\6\0"+
    "\1\1\1\11\3\1\2\0\1\11\1\0\1\1\1\11"+
    "\5\1\1\0\6\1\4\11\14\1\3\0\1\1\2\0"+
    "\4\11\2\1\1\11\1\1\2\0\1\1\1\0\5\1"+
    "\1\0\22\1\4\0\1\1\1\0\2\1\1\0\5\1"+
    "\1\0\20\1\4\0\3\1\1\0\14\1\1\0\1\11"+
    "\2\0\1\1\1\0\1\1\1\0\5\1\4\0\1\1"+
    "\1\0\1\1\1\0\1\11\2\0\1\1\1\0\1\1"+
    "\5\0\1\11\2\0\1\11\7\0\1\11\2\0\1\11"+
    "\14\0\1\11\15\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[247];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private Parser yyparser;
  private Najo najo;
  private StringBuffer string = new StringBuffer();
  
  private int token(int tok) {
     najo.setNumline(yyline+1);
     najo.setTokenpos(yycolumn+1);
     return(tok);
     }
     
  public Yylex(Najo najo, java.io.Reader r, Parser yyparser) {
    this(r);
    this.yyparser = yyparser;
    this.najo = najo;
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1804) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 30: 
          { return token(Parser.SET);
          }
        case 60: break;
        case 17: 
          { return token(Parser.NE);
          }
        case 61: break;
        case 5: 
          { yyparser.yylval = new ParserVal(yytext());
	    return token(Parser.INTEGER);
          }
        case 62: break;
        case 13: 
          { return token(Parser.AS);
          }
        case 63: break;
        case 35: 
          { return token(Parser.BOOL_TRUE);
          }
        case 64: break;
        case 33: 
          { return token(Parser.QUIT);
          }
        case 65: break;
        case 56: 
          { /* Suppression des guillemets de debut et fin */
	    String value = yytext().substring(1, yylength() - 1);
	    yyparser.yylval = new ParserVal(yytext());
	
		return token(Parser.DATE_ISO_B);
          }
        case 66: break;
        case 23: 
          { string.append('\t');
          }
        case 67: break;
        case 31: 
          { return token(Parser.OFF);
          }
        case 68: break;
        case 14: 
          { return token(Parser.GE);
          }
        case 69: break;
        case 46: 
          { yybegin(AFMT); return token(Parser.ASCII_DEX);
          }
        case 70: break;
        case 6: 
          { string.setLength(0); yybegin(STRING);
          }
        case 71: break;
        case 45: 
          { return token(Parser.PRINT);
          }
        case 72: break;
        case 16: 
          { return token(Parser.LE);
          }
        case 73: break;
        case 57: 
          { /* Suppression des guillemets de debut et fin */
	    String value = yytext().substring(1, yylength() - 1);
	    yyparser.yylval = new ParserVal(yytext());
	
		return token(Parser.DATE_ISO_A);
          }
        case 74: break;
        case 26: 
          { /* Comment */
          }
        case 75: break;
        case 9: 
          { string.append('\\');
          }
        case 76: break;
        case 10: 
          { yyparser.yylval = new ParserVal(yytext());
	    return token(Parser.LONG);
          }
        case 77: break;
        case 58: 
          { return token(Parser.GROUP_BY);
          }
        case 78: break;
        case 24: 
          { string.append('\r');
          }
        case 79: break;
        case 52: 
          { yybegin(YYINITIAL);
          }
        case 80: break;
        case 49: 
          { return token(Parser.DEFINE);
          }
        case 81: break;
        case 38: 
          { return token(Parser.WITH);
          }
        case 82: break;
        case 18: 
          { return token(Parser.ON);
          }
        case 83: break;
        case 1: 
          { return token(yycharat(0));
          }
        case 84: break;
        case 22: 
          { string.append('\"');
          }
        case 85: break;
        case 25: 
          { return token(Parser.NOT);
          }
        case 86: break;
        case 29: 
          { return token(Parser.AND);
          }
        case 87: break;
        case 36: 
          { return token(Parser.TYPE_DEX);
          }
        case 88: break;
        case 50: 
          { return token(Parser.SELECT);
          }
        case 89: break;
        case 43: 
          { return Parser.DEBUG;
          }
        case 90: break;
        case 34: 
          { return token(Parser.FROM);
          }
        case 91: break;
        case 59: 
          { yybegin(YYINITIAL); return token(Parser.SEPARATED_BY);
          }
        case 92: break;
        case 47: 
          { yybegin(FMT); return token(Parser.FORMAT);
          }
        case 93: break;
        case 44: 
          { return token(Parser.WHERE);
          }
        case 94: break;
        case 54: 
          { return token(Parser.METADATA);
          }
        case 95: break;
        case 41: 
          { return Parser.TRACE;
          }
        case 96: break;
        case 3: 
          { yyparser.yylval = new ParserVal(yytext());
	    return token(Parser.IDENT);
          }
        case 97: break;
        case 53: 
          { return token(Parser.GENERATE);
          }
        case 98: break;
        case 12: 
          { yyparser.yylval = new ParserVal(yytext());
	    return token(Parser.FLOAT);
          }
        case 99: break;
        case 42: 
          { return token(Parser.ROWID);
          }
        case 100: break;
        case 32: 
          { return Parser.NULL;
          }
        case 101: break;
        case 40: 
          { return token(Parser.BOOL_FALSE);
          }
        case 102: break;
        case 21: 
          { string.append('\n');
          }
        case 103: break;
        case 8: 
          { yybegin(YYINITIAL); 
                                   yyparser.yylval = new ParserVal(string.toString());
                                   return token(Parser.STRING);
          }
        case 104: break;
        case 11: 
          { yyparser.yylval = new ParserVal(yytext());
	    return token(Parser.DOUBLE);
          }
        case 105: break;
        case 15: 
          { return token(Parser.EQEQ);
          }
        case 106: break;
        case 51: 
          { return token(Parser.HAVING);
          }
        case 107: break;
        case 20: 
          { /* format ascii fortran  */
    yyparser.yylval = new ParserVal(yytext());
   
   return (Parser.FMTASCII);
          }
        case 108: break;
        case 27: 
          { yyparser.yylval = new ParserVal(yytext());
	    return token(Parser.HEXA);
          }
        case 109: break;
        case 4: 
          { /* blank */
          }
        case 110: break;
        case 37: 
          { return token(Parser.SHOW);
          }
        case 111: break;
        case 55: 
          { yybegin(BFMT); return token(Parser.BIN);
          }
        case 112: break;
        case 2: 
          { return Parser.NL;
          }
        case 113: break;
        case 48: 
          { return token(Parser.ROWNUM);
          }
        case 114: break;
        case 28: 
          { return token(Parser.FOR);
          }
        case 115: break;
        case 19: 
          { return token(Parser.OR);
          }
        case 116: break;
        case 7: 
          { string.append( yytext() );
          }
        case 117: break;
        case 39: 
          { return token(Parser.BREAK);
          }
        case 118: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case YYINITIAL: {
              return token(Parser.EOF);
            }
            case 248: break;
            default:
              { return 0; }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
